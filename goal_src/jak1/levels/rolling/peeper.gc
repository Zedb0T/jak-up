;;-*-Lisp-*-
(in-package goal)

;; name: originally in rolling-lightning-mole.gc
;; name in dgo: rolling-lightning-mole
;; dgos: L1, ROL
;; note: changed for high fps

;; DECOMP BEGINS

(defskelgroup *lightning-mole-sg* lightning-mole lightning-mole-lod0-jg lightning-mole-idle-ja
              ((lightning-mole-lod0-mg (meters 20))
               (lightning-mole-lod1-mg (meters 40))
               (lightning-mole-lod2-mg (meters 999999))
               )
              :bounds (static-spherem 0 0 0 8)
              :shadow lightning-mole-shadow-mg
              )
              
(defpartgroup group-peeper
  :id 456
  :duration (seconds 0.017)
  :bounds (static-bspherem 0 0 0 15)
  :parts ((sp-item 1768)
    (sp-item 1769 :period (seconds 0.4) :length (seconds 0.1))
    (sp-item 1770 :period (seconds 0.4) :length (seconds 0.2))
    )
  )

(defpart 1768
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 0.25)
    (:x (meters -2) (meters 4))
    (:y (meters -2))
    (:z (meters -2) (meters 4))
    (:scale-x (meters 4) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 64.0)
    (:g 96.0 32.0)
    (:b 64.0 16.0)
    (:a 32.0 32.0)
    (:vel-x (meters -0.006666667) (meters 0.013333334))
    (:vel-y (meters 0.04) (meters 0.026666667))
    (:vel-z (meters -0.006666667) (meters 0.013333334))
    (:rotvel-z (degrees -1.2) (degrees 2.4))
    (:fade-a -0.21333334)
    (:accel-y (meters -0.00066666666))
    (:friction 0.97)
    (:timer (seconds 1.5))
    (:flags (bit2 bit12))
    )
  )

(defpart 1769
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 0.5)
    (:x (meters -2) (meters 4))
    (:y (meters -2))
    (:z (meters -2) (meters 4))
    (:scale-x (meters 4) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 64.0)
    (:g 96.0 32.0)
    (:b 64.0 16.0)
    (:a 32.0 32.0)
    (:vel-x (meters -0.006666667) (meters 0.013333334))
    (:vel-y (meters 0.04) (meters 0.026666667))
    (:vel-z (meters -0.006666667) (meters 0.013333334))
    (:rotvel-z (degrees -1.2) (degrees 2.4))
    (:fade-a -0.21333334)
    (:friction 0.98)
    (:timer (seconds 1.5))
    (:flags (bit2 bit12))
    )
  )

(defpart 1770
  :init-specs ((:texture (new 'static 'texture-id :index #x1d :page #x2))
    (:num 5.0)
    (:x (meters -1) (meters 2))
    (:y (meters 0))
    (:z (meters -1) (meters 2))
    (:scale-x (meters 0.25) (meters 0.1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 64.0)
    (:g 96.0 32.0)
    (:b 64.0 16.0)
    (:a 128.0)
    (:vel-y (meters 0.06666667) (meters 0.053333335))
    (:rotvel-z (degrees -1.2) (degrees 2.4))
    (:accel-y (meters -0.0026666666))
    (:timer (seconds 1.5))
    (:flags (bit2 bit12))
    (:userdata 106496.0)
    (:func 'check-drop-level-rolling-dirt)
    (:conerot-x (degrees 0) (degrees 20))
    (:conerot-y (degrees 180) (degrees 180))
    (:conerot-radius (meters 0) (meters 2))
    )
  )

(defpart 1771
  :init-specs ((:texture (new 'static 'texture-id :index #x1d :page #x2))
    (:num 1.0 1.0)
    (:y (meters 0))
    (:scale-x (meters 0.15) (meters 0.05))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 64.0)
    (:g 96.0 32.0)
    (:b 64.0 16.0)
    (:a 128.0)
    (:vel-y (meters 0.033333335) (meters 0.016666668))
    (:rotvel-z (degrees -1.2) (degrees 2.4))
    (:accel-y (meters -0.0026666666))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:userdata 106496.0)
    (:func 'check-drop-level-rolling-dirt-finish)
    (:conerot-x (degrees 0) (degrees 30))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 0))
    )
  )

(defpart 1772
  :init-specs ((:texture (new 'static 'texture-id :index #x1d :page #x2))
    (:num 1.0)
    (:scale-x (meters 0.15) (meters 0.05))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 64.0)
    (:g 96.0 32.0)
    (:b 64.0 16.0)
    (:a 64.0 64.0)
    (:vel-y (meters 0) (meters 0.013333334))
    (:rotvel-z (degrees -1.2) (degrees 2.4))
    (:fade-a -0.14222223)
    (:friction 0.9)
    (:timer (seconds 3))
    (:flags (bit2 bit12))
    (:conerot-x (degrees 90))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defun check-drop-level-rolling-dirt ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (when (< (-> arg2 y) (-> arg1 user-float))
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (sp-kill-particle arg0 arg1)
      (set-vector! gp-0 (-> arg2 x) (-> arg1 user-float) (-> arg2 z) 1.0)
      (launch-particles (-> *part-id-table* 1771) gp-0)
      )
    )
  (none)
  )

(defun check-drop-level-rolling-dirt-finish ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (when (< (-> arg2 y) (-> arg1 user-float))
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (sp-kill-particle arg0 arg1)
      (if (< (rand-float-gen) 0.05)
          (sound-play "land-grass")
          )
      (set-vector! gp-0 (-> arg2 x) (-> arg1 user-float) (-> arg2 z) 1.0)
      (launch-particles (-> *part-id-table* 1772) gp-0)
      )
    )
  (none)
  )

(deftype peeper (process-drawable)
  ()
  (:states
    peeper-down
    peeper-hide
    peeper-up
    peeper-wait
    )
  )


(defstate peeper-wait (peeper)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('hide)
       (let ((v0-0 (current-time)))
         (set! (-> self state-time) v0-0)
         v0-0
         )
       )
      )
    )
  :enter (behavior ()
    (if (nonzero? (-> self sound))
        (stop! (-> self sound))
        )
    (set-time! (-> self state-time))
    )
  :trans (behavior ()
    (if (and (time-elapsed? (-> self state-time) (seconds 1))
             (not (and *target* (>= 81920.0 (vector-vector-xz-distance (-> self root trans) (-> *target* control trans)))))
             )
        (go peeper-up)
        )
    )
  :code (behavior ()
    (logior! (-> self draw status) (draw-status hidden))
    (loop
      (suspend)
      )
    )
  :post ja-post
  )

(defstate peeper-hide (peeper)
  :code (behavior ()
    (if (nonzero? (-> self sound))
        (stop! (-> self sound))
        )
    (ja-no-eval :num! (seek! max 2.0))
    (while (not (ja-done? 0))
      (suspend)
      (ja-eval)
      )
    (logior! (-> self draw status) (draw-status hidden))
    (go peeper-wait)
    )
  :post ja-post
  )

(defstate peeper-down (peeper)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('hide)
       (go peeper-wait)
       )
      )
    )
  :trans (behavior ()
    (if (and *target* (>= 61440.0 (vector-vector-xz-distance (-> self root trans) (-> *target* control trans))))
        (go peeper-wait)
        )
    )
  :code (behavior ()
    (logior! (-> self draw status) (draw-status hidden))
    (set-time! (-> self state-time))
    (until (time-elapsed? (-> self state-time) (seconds 1))
      (suspend)
      )
    (let* ((f30-0 2.0)
           (v1-10 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
           (v1-11 (the-as number (logior #x3f800000 v1-10)))
           )
      (countdown (gp-0 (+ (the int (* f30-0 (+ -1.0 (the-as float v1-11)))) 1))
        (set-time! (-> self state-time))
        (until (time-elapsed? (-> self state-time) (seconds 5))
          (if (nonzero? (-> self sound))
              (update! (-> self sound))
              )
          (spawn (-> self part) (-> self root trans))
          (suspend)
          )
        (set-time! (-> self state-time))
        (if (nonzero? (-> self sound))
            (stop! (-> self sound))
            )
        (until (time-elapsed? (-> self state-time) (seconds 3))
          (suspend)
          )
        )
      )
    (go peeper-up)
    )
  :post ja-post
  )

(defstate peeper-up (peeper)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('hide)
       (go peeper-hide)
       )
      )
    )
  :enter (behavior ()
    (if (nonzero? (-> self sound))
        (stop! (-> self sound))
        )
    (logclear! (-> self draw status) (draw-status hidden))
    )
  :trans (behavior ()
    (if (and *target* (>= 61440.0 (vector-vector-xz-distance (-> self root trans) (-> *target* control trans))))
        (go peeper-hide)
        )
    )
  :code (behavior ()
    (loop
      (ja-no-eval :group! lightning-mole-peep-ja :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      (go peeper-down)
      )
    )
  :post ja-post
  )

(defmethod init-from-entity! ((this peeper) (arg0 entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *lightning-mole-sg* '())
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 456) this))
  (set! (-> this sound) (new 'process 'ambient-sound arg0 (-> this root trans)))
  (go peeper-up)
  (none)
  )
