;;-*-Lisp-*-
(in-package goal)

;; name: originally in village2-obs.gc
;; name in dgo: village2-obs
;; dgos: L1, VI2


;; DECOMP BEGINS


(deftype fireboulder (process-drawable)
  ((root     collide-shape :override)
   (tracker  handle)
   (task     uint8)
   )
  (:states
    (fireboulder-be-clone handle)
    fireboulder-hover
    fireboulder-idle
    )
  )


(defskelgroup *fireboulder-sg* fireboulder fireboulder-lod0-jg fireboulder-idle-ja
              ((fireboulder-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 3.5 0 6)
              :longest-edge (meters 3.5)
              )

(defbehavior fireboulder-disable-blocking-collision fireboulder ()
  (let ((v1-1 (-> self root root-prim)))
    (dotimes (a0-0 (-> (the-as collide-shape-prim-group v1-1) num-prims))
      (let ((a1-2 (-> (the-as collide-shape-prim-group v1-1) prims a0-0)))
        (when (= (-> a1-2 prim-id) 256)
          (set! (-> a1-2 prim-core collide-as) (collide-kind))
          (set! (-> a1-2 collide-with) (collide-kind))
          0
          )
        )
      )
    (set! (-> v1-1 local-sphere x) 0.0)
    (set! (-> v1-1 local-sphere w) 24576.0)
    )
  0
  (none)
  )

(defbehavior fireboulder-hover-stuff fireboulder ()
  (local-vars (v0-1 object))
  (let ((gp-0 (new 'stack-no-clear 'vector)))
    (vector<-cspace! gp-0 (joint-node fireboulder-lod0-jg bouldercenter))
    (cond
      ((handle->process (-> self tracker))
       (let ((v1-6 (-> (the-as (pointer part-tracker) (-> self tracker process)) 0)))
         (set-time! (-> v1-6 start-time))
         (set! v0-1 (-> v1-6 root trans))
         )
       (set! (-> (the-as vector v0-1) quad) (-> gp-0 quad))
       )
      (else
        (let ((gp-1 (get-process *default-dead-pool* part-tracker #x4000)))
          (set! v0-1
                (ppointer->handle
                  (when gp-1
                    (let ((t9-2 (method-of-type part-tracker activate)))
                      (t9-2 (the-as part-tracker gp-1) *entity-pool* 'part-tracker (the-as pointer #x70004000))
                      )
                    (run-now-in-process gp-1 part-tracker-init (-> *part-group-id-table* 678) -1 #f #f #f (-> self root trans))
                    (-> gp-1 ppointer)
                    )
                  )
                )
          )
        (set! (-> self tracker) (the-as handle v0-1))
        )
      )
    )
  v0-1
  )

(defstate fireboulder-hover (fireboulder)
  :enter (behavior ()
    (fireboulder-disable-blocking-collision)
    (ja-channel-set! 1)
    (ja :group! fireboulder-hover-ja)
    (logclear! (-> self draw status) (draw-status hidden))
    (set! (-> self root trans quad) (-> self entity extra trans quad))
    (vector-reset! (-> self draw origin))
    (logior! (-> self skel status) (janim-status inited))
    (ja-post)
    (logclear! (-> self skel status) (janim-status inited))
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (vector<-cspace! gp-0 (joint-node fireboulder-lod0-jg bouldercenter))
      (vector-! (-> self draw bounds) gp-0 (-> self root trans))
      )
    (set! (-> self draw bounds w) 24576.0)
    )
  :exit (behavior ()
    (stop! (-> self sound))
    )
  :trans (behavior ()
    (fireboulder-hover-stuff)
    (update! (-> self sound))
    )
  :code (behavior ()
    (loop
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (quaternion-rotate-y! (-> self root quat) (-> self root quat) (* 455.1111 (-> *display* time-adjust-ratio)))
        (suspend)
        (ja :num! (seek!))
        )
      )
    )
  :post transform-post
  )

(defstate fireboulder-be-clone (fireboulder)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('stop-cloning)
       (go fireboulder-hover)
       )
      )
    )
  :enter (behavior ((arg0 handle))
    (logclear! (-> self mask) (process-mask actor-pause))
    )
  :exit (behavior ()
    (logior! (-> self mask) (process-mask actor-pause))
    (logclear! (-> self skel status) (janim-status spool))
    )
  :trans fireboulder-hover-stuff
  :code (behavior ((arg0 handle))
    (clone-anim arg0 3 #t "")
    (format 0 "ERROR<GMJ>: fireboulder-be-clone ended~%")
    (cleanup-for-death self)
    (deactivate self)
    )
  )

(defstate fireboulder-idle (fireboulder)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('clone)
       (go fireboulder-be-clone (the-as handle (-> block param 0)))
       )
      )
    )
  :exit (behavior ()
    (let ((a0-1 (handle->process (-> self tracker))))
      (if a0-1
          (deactivate a0-1)
          )
      )
    )
  :code (behavior ()
    (transform-post)
    (loop
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (cond
          ((zero? (-> self task))
           )
          ((handle->process (-> self tracker))
           (set-time! (-> (the-as (pointer part-tracker) (-> self tracker process)) 0 start-time))
           )
          (else
            (set! (-> self tracker) (ppointer->handle (process-spawn
                                                        part-tracker
                                                        :init part-tracker-init
                                                        (-> *part-group-id-table* 271)
                                                        -1
                                                        #f
                                                        #f
                                                        #f
                                                        (-> self root trans)
                                                        :to *entity-pool*
                                                        )
                                                      )
                  )
            )
          )
        (suspend)
        (ja :num! (seek!))
        )
      )
    )
  :post ja-post
  )

(defmethod init-from-entity! ((this fireboulder) (arg0 entity-actor))
  (let ((s4-0 (new 'process 'collide-shape this (collide-list-enum hit-by-others))))
    (let ((s3-0 (new 'process 'collide-shape-prim-group s4-0 (the-as uint 2) 0)))
      (set! (-> s3-0 prim-core collide-as) (collide-kind wall-object))
      (set! (-> s3-0 collide-with) (collide-kind target))
      (set! (-> s3-0 prim-core action) (collide-action solid))
      (set! (-> s3-0 prim-core offense) (collide-offense indestructible))
      (set-vector! (-> s3-0 local-sphere) -24576.0 18432.0 0.0 49152.0)
      (set-root-prim! s4-0 s3-0)
      (let ((s2-0 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
        (set! (-> s2-0 prim-core collide-as) (collide-kind wall-object))
        (set! (-> s2-0 collide-with) (collide-kind target))
        (set! (-> s2-0 prim-core action) (collide-action solid))
        (set! (-> s2-0 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-0 transform-index) 4)
        (set-vector! (-> s2-0 local-sphere) 0.0 0.0 0.0 24576.0)
        (append-prim s3-0 s2-0)
        )
      (let ((s2-1 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 1) (the-as uint 256))))
        (set! (-> s2-1 prim-core collide-as) (collide-kind wall-object))
        (set! (-> s2-1 collide-with) (collide-kind target))
        (set! (-> s2-1 prim-core action) (collide-action solid))
        (set! (-> s2-1 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-1 transform-index) 4)
        (set-vector! (-> s2-1 local-sphere) 0.0 0.0 -24576.0 49152.0)
        (append-prim s3-0 s2-1)
        )
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (backup-collide-with-as s4-0)
    (set! (-> this root) s4-0)
    )
  (process-drawable-from-entity! this arg0)
  (cond
    ((name= (-> this name) "fireboulder-6")
     (quaternion-axis-angle! (-> this root quat) 0.0 1.0 0.0 16384.0)
     (set! (-> this sound)
           (new 'process 'ambient-sound (static-sound-spec "rock-hover" :fo-max 30) (-> this root trans))
           )
     )
    (else
      (fireboulder-disable-blocking-collision)
      )
    )
  (initialize-skeleton this *fireboulder-sg* '())
  (set! (-> this tracker) (the-as handle #f))
  (set-vector! (-> this draw color-emissive) 0.125 0.0625 0.0 0.0)
  (set! (-> this task) (the-as uint (-> arg0 extra perm task)))
  (cond
    ((zero? (-> this task))
     (go fireboulder-idle)
     )
    ((= (get-task-status (-> arg0 extra perm task)) (task-status invalid))
     (go fireboulder-hover)
     )
    (else
      (go fireboulder-idle)
      )
    )
  (none)
  )

(defbehavior boulder1-trans fireboulder ()
  (spawn (-> self part) (-> self draw origin))
  (when (>= (ja-aframe-num 0) 82.0)
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (set! (-> gp-0 quad) (-> self draw origin quad))
      (+! (-> gp-0 y) 2048.0)
      (sound-play "boulder-splash")
      (process-spawn
        part-tracker
        :init part-tracker-init
        (-> *part-group-id-table* 552)
        -1
        #f
        #f
        #f
        gp-0
        :to *entity-pool*
        )
      )
    (send-event self 'trans-hook nothing)
    )
  0
  (none)
  )

(defbehavior boulder2-trans-2 fireboulder ()
  (spawn (-> self part) (-> self draw origin))
  (when (>= (ja-aframe-num 0) 120.0)
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (set! (-> gp-0 quad) (-> self draw origin quad))
      (+! (-> gp-0 y) 2048.0)
      (sound-play "boulder-splash")
      (process-spawn
        part-tracker
        :init part-tracker-init
        (-> *part-group-id-table* 552)
        -1
        #f
        #f
        #f
        gp-0
        :to *entity-pool*
        )
      )
    (send-event self 'trans-hook nothing)
    )
  0
  (none)
  )

(defbehavior boulder2-trans fireboulder ()
  (spawn (-> self part) (-> self draw origin))
  (when (>= (ja-aframe-num 0) 82.0)
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (set! (-> gp-0 quad) (-> self draw origin quad))
      (+! (-> gp-0 y) 2048.0)
      (sound-play "v2ogre-boulder")
      (process-spawn
        part-tracker
        :init part-tracker-init
        (-> *part-group-id-table* 551)
        -1
        #f
        #f
        #f
        gp-0
        :to *entity-pool*
        )
      )
    (send-event self 'trans-hook boulder2-trans-2)
    )
  0
  (none)
  )

(defbehavior boulder3-trans-2 fireboulder ()
  (spawn (-> self part) (-> self draw origin))
  (when (>= (ja-aframe-num 0) 131.0)
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (set! (-> gp-0 quad) (-> self draw origin quad))
      (+! (-> gp-0 y) 2048.0)
      (sound-play "boulder-splash")
      (process-spawn
        part-tracker
        :init part-tracker-init
        (-> *part-group-id-table* 552)
        -1
        #f
        #f
        #f
        gp-0
        :to *entity-pool*
        )
      )
    (send-event self 'trans-hook nothing)
    )
  0
  (none)
  )

(defbehavior boulder3-trans fireboulder ()
  (spawn (-> self part) (-> self draw origin))
  (when (>= (ja-aframe-num 0) 80.0)
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (set! (-> gp-0 quad) (-> self draw origin quad))
      (+! (-> gp-0 y) 2048.0)
      (sound-play "v2ogre-boulder")
      (process-spawn
        part-tracker
        :init part-tracker-init
        (-> *part-group-id-table* 551)
        -1
        #f
        #f
        #f
        gp-0
        :to *entity-pool*
        )
      )
    (send-event self 'trans-hook boulder3-trans-2)
    )
  0
  (none)
  )

(defbehavior boulder4-trans-3 fireboulder ()
  (spawn (-> self part) (-> self draw origin))
  (when (>= (ja-aframe-num 0) 152.4)
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (set! (-> gp-0 quad) (-> self draw origin quad))
      (+! (-> gp-0 y) 2048.0)
      (sound-play "boulder-splash")
      (process-spawn
        part-tracker
        :init part-tracker-init
        (-> *part-group-id-table* 552)
        -1
        #f
        #f
        #f
        gp-0
        :to *entity-pool*
        )
      )
    (send-event self 'trans-hook nothing)
    )
  0
  (none)
  )

(defbehavior boulder4-trans-2 fireboulder ()
  (spawn (-> self part) (-> self draw origin))
  (when (>= (ja-aframe-num 0) 116.0)
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (set! (-> gp-0 quad) (-> self draw origin quad))
      (+! (-> gp-0 y) 2048.0)
      (sound-play "v2ogre-boulder")
      (process-spawn
        part-tracker
        :init part-tracker-init
        (-> *part-group-id-table* 551)
        -1
        #f
        #f
        #f
        gp-0
        :to *entity-pool*
        )
      )
    (send-event self 'trans-hook boulder4-trans-3)
    )
  0
  (none)
  )

(defbehavior boulder4-trans fireboulder ()
  (spawn (-> self part) (-> self draw origin))
  (when (>= (ja-aframe-num 0) 74.0)
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (set! (-> gp-0 quad) (-> self draw origin quad))
      (+! (-> gp-0 y) 2048.0)
      (sound-play "v2ogre-boulder")
      (process-spawn
        part-tracker
        :init part-tracker-init
        (-> *part-group-id-table* 551)
        -1
        #f
        #f
        #f
        gp-0
        :to *entity-pool*
        )
      )
    (send-event self 'trans-hook boulder4-trans-2)
    )
  0
  (none)
  )