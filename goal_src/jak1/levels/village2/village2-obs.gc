;;-*-Lisp-*-
(in-package goal)
(bundles "VI2.DGO")
(require "engine/common-obs/rigid-body.gc")
(require "engine/camera/pov-camera.gc")
(require "engine/game/task/task-control.gc")

;; DECOMP BEGINS

(deftype village2cam (pov-camera)
  ((seq uint64)))

(defskelgroup *village2cam-sg*
  village2cam
  village2cam-lod0-jg
  -1
  ((village2cam-lod0-mg (meters 999999)))
  :bounds (static-spherem 0 0 0 10))

(defmethod set-stack-size! ((this village2cam))
  (stack-size-set! (-> this main-thread) 512)
  (none))

(defstate pov-camera-playing (village2cam)
  :virtual #t
  :code
    (behavior ()
      (let ((v1-0 (-> self seq)))
        (cond
          ((zero? v1-0)
           (ja-no-eval :group! village2cam-elevator-at-top-going-down-ja :num! (seek!) :frame-num 0.0)
           (until (ja-done? 0)
             (suspend)
             (ja :num! (seek!))))
          ((= v1-0 1)
           (ja-no-eval :group! village2cam-elevator-at-bottom-going-up-ja :num! (seek!) :frame-num 0.0)
           (until (ja-done? 0)
             (suspend)
             (ja :num! (seek!))))
          ((= v1-0 2)
           (pov-camera-play-and-reposition (the-as art-joint-anim village2cam-elevator-at-top-going-up-ja)
                                           (new 'static 'vector :x 2199552.0 :y 40960.0 :z -6676480.0)
                                           1.0))
          (else (suspend) 0)))
      (go-virtual pov-camera-done-playing)))

(defskelgroup *med-res-rolling-sg*
  medres-rolling
  medres-rolling-lod0-jg
  medres-rolling-idle-ja
  ((medres-rolling-lod0-mg (meters 999999)))
  :bounds (static-spherem -520 110 70 100)
  :longest-edge (meters 0.01))

(defskelgroup *med-res-rolling1-sg*
  medres-rolling1
  medres-rolling1-lod0-jg
  medres-rolling1-idle-ja
  ((medres-rolling1-lod0-mg (meters 999999)))
  :bounds (static-spherem -300 30 -20 120)
  :longest-edge (meters 0.01))

(defskelgroup *med-res-village2-sg*
  medres-village2
  medres-village2-lod0-jg
  medres-village2-idle-ja
  ((medres-village2-lod0-mg (meters 999999)))
  :bounds (static-spherem -60 65 0 90)
  :longest-edge (meters 0.01))

(deftype ceilingflag (process-drawable) ()
  (:states
   ceilingflag-idle))

(defskelgroup *ceilingflag-sg*
  ceilingflag
  ceilingflag-geo-jg
  ceilingflag-idle-ja
  ((ceilingflag-geo-mg (meters 999999)))
  :bounds (static-spherem 0 -4 0 7))

(defstate ceilingflag-idle (ceilingflag)
  :code
    (behavior ()
      (loop
        (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek!)))))
  :post ja-post)

(defmethod init-from-entity! ((this ceilingflag) (arg0 entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *ceilingflag-sg* '())
  (go ceilingflag-idle)
  (none))

(deftype exit-chamber-dummy (process-drawable)
  ((orig-trans   vector :inline)
   (fcell-handle handle))
  (:methods
   (skip-reminder? (_type_) symbol))
  (:states
   exit-chamber-dummy-idle
   exit-chamber-dummy-wait-to-appear))

(defskelgroup *exit-chamber-dummy-sg*
  exit-chamber-dummy
  exit-chamber-dummy-lod0-jg
  -1
  ((exit-chamber-dummy-lod0-mg (meters 999999)))
  :bounds (static-spherem 0 5 0 15))

(defmethod skip-reminder? ((this exit-chamber-dummy))
  (case (get-reminder (get-task-control (game-task sunken-room)) 0)
    ((2) (let ((v1-4 (level-get *level* 'sunken))) (if (or (not v1-4) (!= (-> v1-4 status) 'active)) (return #t)))))
  #f)

(defstate exit-chamber-dummy-wait-to-appear (exit-chamber-dummy)
  :code
    (behavior ()
      (logior! (-> self draw status) (draw-status hidden))
      (while (not (skip-reminder? self))
        (suspend))
      (when (and (not (task-complete? *game-info* (game-task sunken-room))) (not (-> self child)))
        (let ((a0-3 (new 'stack-no-clear 'vector)))
          (set! (-> a0-3 quad) (-> self root trans quad))
          (+! (-> a0-3 y) 67584.0)
          (let ((v1-12 (birth-pickup-at-point a0-3 (pickup-type fuel-cell) 47.0 #f self (the-as fact-info #f))))
            (set! (-> self fcell-handle) (ppointer->handle v1-12))
            (send-event (ppointer->process v1-12) 'collide-shape #f))))
      (go exit-chamber-dummy-idle)))

(defstate exit-chamber-dummy-idle (exit-chamber-dummy)
  :code
    (behavior ()
      (logclear! (-> self draw status) (draw-status hidden))
      (let ((gp-0 0))
        (while (< gp-0 2)
          (if (skip-reminder? self) (set! gp-0 0) (+! gp-0 1))
          (set! (-> self root trans y)
                (+ (-> self orig-trans y) (* 2252.8 (cos (* 36.40889 (the float (mod (current-time) 1800)))))))
          (let ((a0-7 (handle->process (-> self fcell-handle))))
            (when a0-7
              (let ((v1-14 (new 'stack-no-clear 'vector)))
                (set! (-> v1-14 quad) (-> self root trans quad))
                (+! (-> v1-14 y) 67584.0)
                (send-event a0-7 'trans v1-14))))
          (suspend)))
      (let ((a0-11 (handle->process (-> self fcell-handle)))) (if a0-11 (deactivate a0-11)))
      (go exit-chamber-dummy-wait-to-appear))
  :post ja-post)

(defmethod init-from-entity! ((this exit-chamber-dummy) (arg0 entity-actor))
  (set! (-> this fcell-handle) (the-as handle #f))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (logclear! (-> this mask) (process-mask actor-pause))
  (+! (-> this root trans y) 24576.0)
  (set! (-> this orig-trans quad) (-> this root trans quad))
  (initialize-skeleton this *exit-chamber-dummy-sg* '())
  (ja-channel-set! 1)
  (let ((s5-1 (-> this skel root-channel 0)))
    (joint-control-channel-group-eval! s5-1 (the-as art-joint-anim (-> this draw art-group data 2)) num-func-identity)
    (set! (-> s5-1 frame-num) 0.0))
  (logior! (-> this draw status) (draw-status hidden))
  (go exit-chamber-dummy-wait-to-appear)
  (none))

(deftype ogreboss-village2 (process-drawable)
  ((boulder handle))
  (:states
   ogreboss-village2-idle
   ogreboss-village2-throw))

(defskelgroup *ogreboss-village2-sg*
  ogreboss-village2
  ogreboss-village2-lod0-jg
  ogreboss-village2-idle-ja
  ((ogreboss-village2-lod0-mg (meters 999999)))
  :bounds (static-spherem 0 10 0 15))

(defpartgroup group-ogreboulder-trail
  :id 564
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 8)
  :parts
  ((sp-item 2319 :fade-after (meters 200) :falloff-to (meters 200))
   (sp-item 2320 :fade-after (meters 200) :falloff-to (meters 200))))

(defpart 2320
  :init-specs
  ((:texture (new 'static 'texture-id :page #x2))
   (:num 0.5)
   (:x (meters -1) (meters 2))
   (:y (meters -1) (meters 2))
   (:z (meters -1) (meters 2))
   (:scale-x (meters 8) (meters 4))
   (:rot-z (degrees 0) (degrees 360))
   (:scale-y :copy scale-x)
   (:r 128.0)
   (:g 96.0)
   (:b 32.0)
   (:a 48.0 48.0)
   (:vel-y (meters 0.0016666667) (meters 0.00083333335))
   (:scalevel-x (meters 0.04))
   (:rotvel-z (degrees -1.9999999) (degrees 3.9999998))
   (:scalevel-y :copy scalevel-x)
   (:fade-r -0.21333334)
   (:fade-g -0.10666667)
   (:fade-b 0.10666667)
   (:fade-a -0.32)
   (:accel-y (meters -0.000006666667))
   (:timer (seconds 1))
   (:flags (bit2 bit14))))

(defpart 2319
  :init-specs
  ((:texture (new 'static 'texture-id :page #x2))
   (:num 0.5)
   (:x (meters -1) (meters 2))
   (:y (meters -1) (meters 2))
   (:z (meters -1) (meters 2))
   (:scale-x (meters 8) (meters 4))
   (:rot-z (degrees 0) (degrees 360))
   (:scale-y :copy scale-x)
   (:r 128.0)
   (:g 96.0)
   (:b 32.0)
   (:a 80.0 80.0)
   (:vel-y (meters 0.0016666667) (meters 0.00083333335))
   (:scalevel-x (meters 0.04))
   (:rotvel-z (degrees -1.9999999) (degrees 3.9999998))
   (:scalevel-y :copy scalevel-x)
   (:fade-g -0.53333336)
   (:fade-b -0.17777778)
   (:fade-a -1.0666667)
   (:accel-y (meters -0.000006666667))
   (:timer (seconds 0.6))
   (:flags (bit2 bit3 bit14))))

(defpartgroup group-ogreboulder-hit-wall
  :id 551
  :duration (seconds 3)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 64)
  :parts ((sp-item 2287 :period (seconds 3) :length (seconds 0.135))))

(defpart 2287
  :init-specs
  ((:texture (new 'static 'texture-id :index #xf :page #x2))
   (:num 12.0)
   (:y (meters 1) (meters 3))
   (:scale-x (meters 0.4) (meters 0.1))
   (:rot-z (degrees 0) (degrees 180))
   (:scale-y (meters 10) (meters 6))
   (:r 196.0 64.0)
   (:g 128.0 64.0)
   (:b 128.0 64.0)
   (:a 32.0 64.0)
   (:scalevel-y (meters 1.4))
   (:fade-a -3.2)
   (:timer (seconds 0.1))
   (:flags (bit2 bit3 bit14))))

(defpartgroup group-ogreboulder-splash
  :id 552
  :duration (seconds 3)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 64)
  :parts
  ((sp-item 2288 :period (seconds 3) :length (seconds 0.067))
   (sp-item 2321 :flags (is-3d) :period (seconds 3) :length (seconds 0.035))
   (sp-item 2322 :flags (is-3d) :period (seconds 3) :length (seconds 0.035))))

(defpart 2321
  :init-specs
  ((:texture (new 'static 'texture-id :index #x1e :page #x2))
   (:num 8.0)
   (:x (meters 0) (meters 9))
   (:scale-x (meters 16) (meters 8))
   (:rot-y (degrees 0) (degrees 360))
   (:scale-y :copy scale-x)
   (:r 128.0 64.0)
   (:g 128.0 64.0)
   (:b 128.0 64.0)
   (:a 0.0)
   (:scalevel-x (meters 0.026666667) (meters 0.026666667))
   (:scalevel-y :copy scalevel-x)
   (:fade-a 3.2)
   (:timer (seconds 5))
   (:flags (bit2 bit14))
   (:next-time (seconds 0.035) (seconds 0.097))
   (:next-launcher 2323)
   (:conerot-x (degrees 70) (degrees 20))
   (:conerot-y (degrees 0) (degrees 360))
   (:rotate-y (degrees 0) (degrees 360))))

(defpart 2323
  :init-specs ((:fade-a -0.094814815)))

(defpart 2322
  :init-specs
  ((:texture (new 'static 'texture-id :index #x1e :page #x2))
   (:num 8.0)
   (:x (meters 8) (meters 8))
   (:scale-x (meters 4.5) (meters 3.5))
   (:rot-y (degrees 0) (degrees 360))
   (:scale-y :copy scale-x)
   (:r 128.0 64.0)
   (:g 128.0 64.0)
   (:b 128.0 64.0)
   (:a 0.0)
   (:scalevel-x (meters 0.02) (meters 0.013333334))
   (:scalevel-y :copy scalevel-x)
   (:fade-a 3.2)
   (:timer (seconds 5))
   (:flags (bit2 bit14))
   (:next-time (seconds 0.035) (seconds 0.097))
   (:next-launcher 2323)
   (:conerot-x (degrees 70) (degrees 20))
   (:conerot-y (degrees 0) (degrees 360))
   (:rotate-y (degrees 0) (degrees 360))))

(defpart 2288
  :init-specs
  ((:texture (new 'static 'texture-id :page #x2))
   (:num 16.0)
   (:y (meters 0) (meters 1))
   (:scale-x (meters 12) (meters 6))
   (:rot-z (degrees 0) (degrees 360))
   (:scale-y :copy scale-x)
   (:r 50.0)
   (:g 80.0 64.0)
   (:b 200.0)
   (:a 48.0 48.0)
   (:vel-y (meters 0.10666667) (meters 0.10666667))
   (:scalevel-x (meters 0.026666667))
   (:rotvel-z (degrees -0.6) (degrees 1.2))
   (:scalevel-y :copy scalevel-x)
   (:fade-a -0.16)
   (:accel-y (meters 0.0005) (meters 0.0005))
   (:friction 0.85)
   (:timer (seconds 2.2))
   (:flags (bit2 bit14))
   (:conerot-x (degrees 0) (degrees 90))
   (:conerot-y (degrees 0) (degrees 360))
   (:conerot-radius (meters 0) (meters 8))))

(defbehavior ogreboss-village2-trans ogreboss-village2 ()
  (when (= (get-task-status (game-task village2-levitator)) (task-status invalid))
    (cleanup-for-death self)
    (deactivate self))
  (none))

(defstate ogreboss-village2-throw (ogreboss-village2)
  :trans ogreboss-village2-trans
  :code
    (behavior ()
      (set! (-> self boulder)
            (ppointer->handle (manipy-spawn (-> self entity extra trans) (-> self entity) *fireboulder-sg* #f :to self)))
      (send-event (handle->process (-> self boulder)) 'anim-mode 'play1)
      (send-event (handle->process (-> self boulder)) 'art-joint-anim "fireboulder-pre-throw" 0)
      (send-event (handle->process (-> self boulder)) 'draw #t)
      (send-event (handle->process (-> self boulder)) 'origin-joint-index 4)
      (send-event (handle->process (-> self boulder)) 'max-vis-dist 2048000.0)
      (send-event (handle->process (-> self boulder))
                  'eval
                  (lambda :behavior ogreboss-village2 ()
                    (let ((v0-0 (create-launch-control (-> *part-group-id-table* 564) self))) (set! (-> self part) v0-0) v0-0)))
      (ja-channel-push! 1 (seconds 0.2))
      (ja-no-eval :group! ogreboss-village2-pre-throw-ja :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!)))
      (let ((f0-9 (rand-float-gen)))
        (cond
          ((< 0.75 f0-9)
           (send-event (handle->process (-> self boulder)) 'art-joint-anim "fireboulder-boulder1" 0)
           (send-event (handle->process (-> self boulder)) 'trans-hook boulder1-trans))
          ((< 0.5 f0-9)
           (send-event (handle->process (-> self boulder)) 'art-joint-anim "fireboulder-boulder2" 0)
           (send-event (handle->process (-> self boulder)) 'trans-hook boulder2-trans))
          ((< 0.25 f0-9)
           (send-event (handle->process (-> self boulder)) 'art-joint-anim "fireboulder-boulder3" 0)
           (send-event (handle->process (-> self boulder)) 'trans-hook boulder3-trans))
          (else
           (send-event (handle->process (-> self boulder)) 'art-joint-anim "fireboulder-boulder4" 0)
           (send-event (handle->process (-> self boulder)) 'trans-hook boulder4-trans))))
      (ja-channel-push! 1 (seconds 0.2))
      (ja-no-eval :group! ogreboss-village2-throw-ja :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!)))
      (go ogreboss-village2-idle))
  :post ja-post)

(defstate ogreboss-village2-idle (ogreboss-village2)
  :trans ogreboss-village2-trans
  :code
    (behavior ()
      (loop
        (ja-channel-push! 1 (seconds 0.1))
        (let ((v1-0 (rand-vu-int-range 0 2)))
          (cond
            ((zero? v1-0)
             (ja-no-eval :group! ogreboss-village2-idle-ja :num! (seek! (ja-aframe 140.0 0)) :frame-num 0.0)
             (until (ja-done? 0)
               (suspend)
               (ja :num! (seek! (ja-aframe 140.0 0))))
             (let ((gp-2 (current-time))) (until (time-elapsed? gp-2 (seconds 0.167)) (suspend)))
             (ja-no-eval :group! ogreboss-village2-idle-ja :num! (seek! (ja-aframe 168.0 0)) :frame-num (ja-aframe 140.0 0))
             (until (ja-done? 0)
               (suspend)
               (ja :num! (seek! (ja-aframe 168.0 0))))
             (let ((gp-5 (current-time))) (until (time-elapsed? gp-5 (seconds 0.167)) (suspend)))
             (ja-no-eval :group! ogreboss-village2-idle-ja :num! (seek!) :frame-num (ja-aframe 168.0 0))
             (until (ja-done? 0)
               (suspend)
               (ja :num! (seek!))))
            ((= v1-0 1)
             (ja-no-eval :group! ogreboss-village2-idle-alt-ja :num! (seek!) :frame-num 0.0)
             (until (ja-done? 0)
               (suspend)
               (ja :num! (seek!))))
            (else
             (dotimes (gp-7 4)
               (ja-no-eval :group! ogreboss-village2-idle-bored-ja :num! (seek!) :frame-num 0.0)
               (until (ja-done? 0)
                 (suspend)
                 (ja :num! (seek!)))))))
        (let ((f0-33 (rand-float-gen)))
          (cond
            ((< 0.6666667 f0-33)
             (ja-channel-push! 1 (seconds 0.2))
             (ja-no-eval :group! ogreboss-village2-victory-ja :num! (seek!) :frame-num 0.0)
             (until (ja-done? 0)
               (suspend)
               (ja :num! (seek!))))
            ((not (handle->process (-> self boulder))) (go ogreboss-village2-throw))))))
  :post ja-post)

(defmethod init-from-entity! ((this ogreboss-village2) (arg0 entity-actor))
  (let ((s4-0 (new 'process 'collide-shape this (collide-list-enum hit-by-player))))
    (let ((s3-0 (new 'process 'collide-shape-prim-group s4-0 (the-as uint 1) 0)))
      (set! (-> s3-0 prim-core collide-as) (collide-kind enemy))
      (set! (-> s3-0 collide-with) (collide-kind target))
      (set! (-> s3-0 prim-core action) (collide-action solid))
      (set-vector! (-> s3-0 local-sphere) 0.0 40960.0 0.0 40960.0)
      (set-root-prim! s4-0 s3-0)
      (let ((s2-0 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 3))))
        (set! (-> s2-0 prim-core collide-as) (collide-kind enemy))
        (set! (-> s2-0 collide-with) (collide-kind target))
        (set! (-> s2-0 prim-core action) (collide-action solid))
        (set! (-> s2-0 prim-core offense) (collide-offense touch))
        (set-vector! (-> s2-0 local-sphere) 0.0 34816.0 0.0 14336.0)
        (append-prim s3-0 s2-0)))
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (backup-collide-with-as s4-0)
    (set! (-> this root) s4-0))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *ogreboss-village2-sg* '())
  (set-vector! (-> this root scale) 0.65 0.65 0.65 1.0)
  (transform-post)
  (set! (-> this root pause-adjust-distance) 122880.0)
  (logclear! (-> this mask) (process-mask actor-pause))
  (set! (-> this boulder) (the-as handle #f))
  (go ogreboss-village2-idle)
  (none))

(deftype villageb-ogreboss (ogreboss-village2) ())

(deftype villageb-water (water-anim) ())

(define ripple-for-villageb-water
  (new 'static
       'ripple-wave-set
       :count 3
       :converted #f
       :normal-scale 6.0
       :wave
       (new 'static
            'inline-array
            ripple-wave
            4
            (new 'static 'ripple-wave :scale 7.0 :xdiv 1 :speed 6.0)
            (new 'static 'ripple-wave :scale 7.0 :xdiv -1 :zdiv 1 :speed 6.0)
            (new 'static 'ripple-wave :scale 3.0 :xdiv 5 :zdiv 3 :speed 3.0)
            (new 'static 'ripple-wave))))

(defmethod water-vol-method-22 ((this villageb-water))
  (let ((t9-0 (method-of-type water-anim water-vol-method-22))) (t9-0 this))
  (let ((v1-2 (new 'process 'ripple-control)))
    (set! (-> this draw ripple) v1-2)
    (set-vector! (-> this draw color-mult) 0.01 0.45 0.5 0.75)
    (set! (-> v1-2 global-scale) 3072.0)
    (set! (-> v1-2 close-fade-dist) 163840.0)
    (set! (-> v1-2 far-fade-dist) 245760.0)
    (set! (-> v1-2 waveform) ripple-for-villageb-water))
  (none))
