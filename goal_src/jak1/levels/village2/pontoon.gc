;;-*-Lisp-*-
(in-package goal)

;; originally in name: village2-obs.gc
;; name in dgo: village2-obs
;; dgos: L1, VI2


;; DECOMP BEGINS


(deftype pontoon (rigid-body-platform)
  ((anchor-point vector :inline :offset-assert 736)
   (task         uint8          :offset-assert 752)
   (alt-task     uint8          :offset-assert 753)
   )
  :heap-base #x290
  :method-count-assert 35
  :size-assert         #x2f2
  :flag-assert         #x23029002f2
  (:states
    pontoon-die
    pontoon-hidden
    )
  )


(defstate pontoon-hidden (pontoon)
  :enter (behavior ()
    (logior! (-> self draw status) (draw-status hidden))
    (clear-collide-with-as (-> self root-overlay))
    (none)
    )
  :exit (behavior ()
    (logclear! (-> self draw status) (draw-status hidden))
    (restore-collide-with-as (-> self root-overlay))
    (none)
    )
  :trans (behavior ()
    (if (task-closed? (the-as game-task (-> self task)) (task-status need-resolution))
        (go-virtual rigid-body-platform-idle)
        )
    (none)
    )
  :code (behavior ()
    (loop
      (suspend)
      )
    (none)
    )
  )

(defstate pontoon-die (pontoon)
  :code (behavior ()
    (cleanup-for-death self)
    (deactivate self)
    (none)
    )
  )

(defstate rigid-body-platform-float (pontoon)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (let ((v1-0 event-type))
      (the-as object (cond
                       ((= v1-0 'die)
                        (cleanup-for-death self)
                        (the-as vector (deactivate self))
                        )
                       (else
                         (rigid-body-platform-event-handler proc arg1 event-type event)
                         )
                       )
              )
      )
    )
  )

(defstate rigid-body-platform-idle (pontoon)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (the-as object (case event-type
                     (('die)
                      (cleanup-for-death self)
                      (the-as symbol (deactivate self))
                      )
                     )
            )
    )
  )

(defmethod init-from-entity! pontoon ((obj pontoon) (arg0 entity-actor))
  (logior! (-> obj mask) (process-mask platform))
  (rigid-body-platform-method-30 obj)
  (process-drawable-from-entity! obj arg0)
  (rigid-body-platform-method-31 obj)
  (set! (-> obj water-anim) #f)
  (set! (-> obj root-overlay pause-adjust-distance) -122880.0)
  (set! (-> obj task) (the-as uint (-> arg0 extra perm task)))
  (set! (-> obj alt-task) (res-lump-value arg0 'alt-task uint))
  (cond
    ((and (nonzero? (-> obj alt-task))
          (task-closed? (the-as game-task (-> obj alt-task)) (task-status need-resolution))
          )
     (go pontoon-die)
     )
    ((zero? (-> obj task))
     (go (method-of-object obj rigid-body-platform-idle))
     )
    ((task-closed? (the-as game-task (-> obj task)) (task-status need-resolution))
     (go (method-of-object obj rigid-body-platform-idle))
     )
    (else
      (go pontoon-hidden)
      )
    )
  0
  (none)
  )

(defmethod rigid-body-platform-method-23 pontoon ((obj pontoon) (arg0 float))
  ((the-as (function rigid-body-platform basic none) (find-parent-method pontoon 23)) obj (the-as basic arg0))
  (rigid-body-platform-method-27 obj (-> obj anchor-point))
  0
  (none)
  )

(define *pontoonfive-constants* (new 'static 'rigid-body-platform-constants
                                  :drag-factor 4.0
                                  :buoyancy-factor 3.0
                                  :max-buoyancy-depth (meters 3)
                                  :gravity-factor 0.0
                                  :gravity (meters 80)
                                  :player-weight (meters 35)
                                  :player-bonk-factor 1.0
                                  :player-dive-factor 1.0
                                  :player-force-distance (meters 1000)
                                  :player-force-clamp (meters 1000000)
                                  :player-force-timeout (seconds 0.1)
                                  :explosion-force (meters 1000)
                                  :linear-damping 0.98
                                  :angular-damping 0.98
                                  :control-point-count 4
                                  :mass 2.0
                                  :inertial-tensor-x (meters 2.5)
                                  :inertial-tensor-y (meters 2)
                                  :inertial-tensor-z (meters 3.2)
                                  :idle-distance (meters 90)
                                  :platform #t
                                  :sound-name "pontoonten"
                                  )
        )

(define *pontoonten-constants* (new 'static 'rigid-body-platform-constants
                                 :drag-factor 4.0
                                 :buoyancy-factor 3.0
                                 :max-buoyancy-depth (meters 3)
                                 :gravity-factor 0.0
                                 :gravity (meters 80)
                                 :player-weight (meters 35)
                                 :player-bonk-factor 1.0
                                 :player-dive-factor 1.0
                                 :player-force-distance (meters 1000)
                                 :player-force-clamp (meters 1000000)
                                 :player-force-timeout (seconds 0.1)
                                 :explosion-force (meters 1000)
                                 :linear-damping 0.98
                                 :angular-damping 0.95
                                 :control-point-count 4
                                 :mass 4.0
                                 :inertial-tensor-x (meters 5)
                                 :inertial-tensor-y (meters 2)
                                 :inertial-tensor-z (meters 3.2)
                                 :idle-distance (meters 90)
                                 :platform #t
                                 :sound-name "pontoonten"
                                 )
        )

(deftype pontoonfive (pontoon)
  ()
  :heap-base #x290
  :method-count-assert 35
  :size-assert         #x2f2
  :flag-assert         #x23029002f2
  )


(deftype pontoonten (pontoon)
  ()
  :heap-base #x290
  :method-count-assert 35
  :size-assert         #x2f2
  :flag-assert         #x23029002f2
  )


(defskelgroup *pontoonfive-sg* pontoonfive pontoonfive-lod0-jg pontoonfive-idle-ja
              ((pontoonfive-lod0-mg (meters 20)) (pontoonfive-lod1-mg (meters 40)) (pontoonfive-lod2-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 5)
              :longest-edge (meters 3.5)
              )

(defskelgroup *pontoonten-sg* pontoonten pontoonten-lod0-jg pontoonten-idle-ja
              ((pontoonten-lod0-mg (meters 20)) (pontoonten-lod1-mg (meters 40)) (pontoonten-lod2-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 7)
              :longest-edge (meters 4)
              )

(defmethod rigid-body-platform-method-30 pontoonfive ((obj pontoonfive))
  (let ((s5-0 (new 'process 'collide-shape-moving obj (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) default-collision-reaction)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing)
          )
    (alloc-riders s5-0 1)
    (let ((s4-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s4-0 prim-core collide-as) (collide-kind enemy))
      (set! (-> s4-0 collide-with) (collide-kind target))
      (set! (-> s4-0 prim-core action) (collide-action solid rider-plat-sticky))
      (set! (-> s4-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s4-0 transform-index) 0)
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 18432.0)
      (set-root-prim! s5-0 s4-0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (backup-collide-with-as s5-0)
    (set! (-> obj root-overlay) s5-0)
    )
  0
  (none)
  )

(defmethod rigid-body-platform-method-31 pontoonfive ((obj pontoonfive))
  (initialize-skeleton obj *pontoonfive-sg* '())
  (rigid-body-platform-method-29 obj *pontoonfive-constants*)
  (set! (-> obj float-height-offset) 6144.0)
  (set! (-> obj root-overlay nav-radius) 12288.0)
  (let ((v1-6 (-> obj control-point-array data)))
    (set! (-> v1-6 0 local-pos x) 9216.0)
    (set! (-> v1-6 0 local-pos y) 0.0)
    (set! (-> v1-6 0 local-pos z) 12083.2)
    (set! (-> v1-6 0 local-pos w) 1.0)
    )
  (let ((v1-8 (-> obj control-point-array data 1)))
    (set! (-> v1-8 local-pos x) 9216.0)
    (set! (-> v1-8 local-pos y) 0.0)
    (set! (-> v1-8 local-pos z) -12083.2)
    (set! (-> v1-8 local-pos w) 1.0)
    )
  (let ((v1-10 (-> obj control-point-array data 2)))
    (set! (-> v1-10 local-pos x) -9216.0)
    (set! (-> v1-10 local-pos y) 0.0)
    (set! (-> v1-10 local-pos z) -12083.2)
    (set! (-> v1-10 local-pos w) 1.0)
    )
  (let ((v1-12 (-> obj control-point-array data 3)))
    (set! (-> v1-12 local-pos x) -9216.0)
    (set! (-> v1-12 local-pos y) 0.0)
    (set! (-> v1-12 local-pos z) 12083.2)
    (set! (-> v1-12 local-pos w) 1.0)
    )
  (set! (-> obj anchor-point quad) (-> obj root-overlay trans quad))
  (nav-mesh-connect obj (-> obj root-overlay) (the-as nav-control #f))
  0
  (none)
  )

(defmethod rigid-body-platform-method-30 pontoonten ((obj pontoonten))
  (let ((s5-0 (new 'process 'collide-shape-moving obj (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) default-collision-reaction)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing)
          )
    (alloc-riders s5-0 1)
    (let ((s4-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s4-0 prim-core collide-as) (collide-kind enemy))
      (set! (-> s4-0 collide-with) (collide-kind target))
      (set! (-> s4-0 prim-core action) (collide-action solid rider-plat-sticky))
      (set! (-> s4-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s4-0 transform-index) 0)
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 25395.2)
      (set-root-prim! s5-0 s4-0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (backup-collide-with-as s5-0)
    (set! (-> obj root-overlay) s5-0)
    )
  0
  (none)
  )

(defmethod rigid-body-platform-method-31 pontoonten ((obj pontoonten))
  (initialize-skeleton obj *pontoonten-sg* '())
  (rigid-body-platform-method-29 obj *pontoonten-constants*)
  (set! (-> obj float-height-offset) 6144.0)
  (set! (-> obj root-overlay nav-radius) 20480.0)
  (let ((v1-6 (-> obj control-point-array data)))
    (set! (-> v1-6 0 local-pos x) 17408.0)
    (set! (-> v1-6 0 local-pos y) 0.0)
    (set! (-> v1-6 0 local-pos z) 10035.2)
    (set! (-> v1-6 0 local-pos w) 1.0)
    )
  (let ((v1-8 (-> obj control-point-array data 1)))
    (set! (-> v1-8 local-pos x) 17408.0)
    (set! (-> v1-8 local-pos y) 0.0)
    (set! (-> v1-8 local-pos z) -10035.2)
    (set! (-> v1-8 local-pos w) 1.0)
    )
  (let ((v1-10 (-> obj control-point-array data 2)))
    (set! (-> v1-10 local-pos x) -17408.0)
    (set! (-> v1-10 local-pos y) 0.0)
    (set! (-> v1-10 local-pos z) -10035.2)
    (set! (-> v1-10 local-pos w) 1.0)
    )
  (let ((v1-12 (-> obj control-point-array data 3)))
    (set! (-> v1-12 local-pos x) -17408.0)
    (set! (-> v1-12 local-pos y) 0.0)
    (set! (-> v1-12 local-pos z) 10035.2)
    (set! (-> v1-12 local-pos w) 1.0)
    )
  (set! (-> obj anchor-point quad) (-> obj root-overlay trans quad))
  (nav-mesh-connect obj (-> obj root-overlay) (the-as nav-control #f))
  0
  (none)
  )

(defpartgroup group-allpontoons-trail
  :id 563
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2841 :flags (is-3d) :period (seconds 3) :length (seconds 0.017))
    (sp-item 2842 :flags (is-3d) :period (seconds 3) :length (seconds 0.017))
    )
  )

(defpart 2841
  :init-specs ((:texture (new 'static 'texture-id :index #x1e :page #x2))
    (:num 8.0)
    (:x (meters 0) (meters 9))
    (:y (meters 0.1))
    (:scale-x (meters 0.2) (meters 2))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 64.0)
    (:g 128.0 64.0)
    (:b 128.0 64.0)
    (:a 0.0)
    (:scalevel-x (meters 0.01) (meters 0.001))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 3.2)
    (:timer (seconds 5))
    (:flags (bit2 bit3 bit14))
    (:next-time (seconds 0.035) (seconds 0.097))
    (:next-launcher 2843)
    (:conerot-x (degrees 70) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(defpart 2843
  :init-specs ((:fade-a -0.094814815))
  )

(defpart 2842
  :init-specs ((:texture (new 'static 'texture-id :index #x1e :page #x2))
    (:num 8.0)
    (:x (meters 8) (meters 8))
    (:y (meters 0.1))
    (:scale-x (meters 0.2) (meters 2))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 64.0)
    (:g 128.0 64.0)
    (:b 128.0 64.0)
    (:a 0.0)
    (:scalevel-x (meters 0.006666667) (meters 0.001))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 3.2)
    (:timer (seconds 5))
    (:flags (bit2 bit3 bit14))
    (:next-time (seconds 0.035) (seconds 0.097))
    (:next-launcher 2843)
    (:conerot-x (degrees 70) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(deftype allpontoons (process-drawable)
  ((task uint8  :offset-assert 176)
   )
  :heap-base #x50
  :method-count-assert 20
  :size-assert         #xb1
  :flag-assert         #x14005000b1
  (:states
    (allpontoons-be-clone handle)
    allpontoons-idle
    )
  )


(defskelgroup *allpontoons-sg* allpontoons allpontoons-lod0-jg allpontoons-idle-ja
              ((allpontoons-lod0-mg (meters 999999)))
              :bounds (static-spherem 32 0 -5 34)
              )

(defstate allpontoons-be-clone (allpontoons)
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (the-as object (case event-type
                     (('end-mode)
                      (cleanup-for-death self)
                      (the-as symbol (deactivate self))
                      )
                     )
            )
    )
  :enter (behavior ((arg0 handle))
    (logclear! (-> self draw status) (draw-status hidden))
    (logclear! (-> self mask) (process-mask actor-pause))
    (none)
    )
  :exit (behavior ()
    (logior! (-> self mask) (process-mask actor-pause))
    (none)
    )
  :trans (behavior ()
    (when (>= (ja-aframe-num 0) 500.0)
      (spawn (-> self part) (vector<-cspace! (new 'stack-no-clear 'vector) (-> self node-list data 3)))
      (spawn (-> self part) (vector<-cspace! (new 'stack-no-clear 'vector) (-> self node-list data 4)))
      (spawn (-> self part) (vector<-cspace! (new 'stack-no-clear 'vector) (-> self node-list data 5)))
      (spawn (-> self part) (vector<-cspace! (new 'stack-no-clear 'vector) (-> self node-list data 6)))
      (spawn (-> self part) (vector<-cspace! (new 'stack-no-clear 'vector) (-> self node-list data 7)))
      (spawn (-> self part) (vector<-cspace! (new 'stack-no-clear 'vector) (-> self node-list data 9)))
      )
    (none)
    )
  :code (behavior ((arg0 handle))
    (clone-anim arg0 3 #t "")
    (cleanup-for-death self)
    (deactivate self)
    (none)
    )
  )

(defstate allpontoons-idle (allpontoons)
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (case event-type
      (('clone)
       (go allpontoons-be-clone (the-as handle (-> event param 0)))
       )
      )
    )
  :enter (behavior ()
    (logior! (-> self draw status) (draw-status hidden))
    (none)
    )
  :code (behavior ()
    (loop
      (when (and (nonzero? (-> self task)) (task-closed? (the-as game-task (-> self task)) (task-status need-resolution)))
        (cleanup-for-death self)
        (deactivate self)
        )
      (logior! (-> self mask) (process-mask sleep))
      (suspend)
      )
    (none)
    )
  )

(defmethod init-from-entity! allpontoons ((obj allpontoons) (arg0 entity-actor))
  (set! (-> obj root) (new 'process 'trsqv))
  (process-drawable-from-entity! obj arg0)
  (initialize-skeleton obj *allpontoons-sg* '())
  (set! (-> obj task) (the-as uint (-> arg0 extra perm task)))
  (set! (-> obj part) (create-launch-control (-> *part-group-id-table* 563) obj))
  (go allpontoons-idle)
  (none)
  )