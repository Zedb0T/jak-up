;;-*-Lisp-*-
(in-package goal)

;; name: swamp-obs.gc
;; name in dgo: swamp-obs
;; dgos: L1, SWA
;; note: changed for high fps


(deftype balance-plat (process-drawable)
  ((root-override collide-shape-moving  :offset        112)
   (y-travel      float                 :offset-assert 176)
   (y-init        float                 :offset-assert 180)
   (y-offset      float                 :offset-assert 184)
   (y-vel         float                 :offset-assert 188)
   (y-accel       float                 :offset-assert 192)
   (got-grow      symbol                :offset-assert 196)
   )
  :heap-base #x60
  :method-count-assert 20
  :size-assert         #xc8
  :flag-assert         #x14006000c8
  (:states
    balance-plat-idle
    )
  )


(defskelgroup *balance-plat-sg* balance-plat balance-plat-lod0-jg balance-plat-idle-ja
              ((balance-plat-lod0-mg (meters 20)) (balance-plat-lod1-mg (meters 40)) (balance-plat-lod2-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 10)
              )

(defstate balance-plat-idle (balance-plat)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('grow)
       (let ((v0-0 #t))
         (set! (-> self got-grow) v0-0)
         v0-0
         )
       )
      )
    )
  :trans rider-trans
  :code (behavior ()
    (loop
      ;; og:preserve-this modified for high fps
      (let ((f30-0 (* -0.025 (+ (-> self y-offset) (-> self y-travel))))
            (f28-0 (* -0.025 (- (-> self y-offset) (-> self y-travel))))
            )
        (cond
          ((and (-> self root-override riders) (nonzero? (-> self root-override riders num-riders)))
           ;; has rider, accelerate downwards
           (send-event *target* 'no-look-around (seconds 0.25))
           (set! (-> self y-accel) (fmin 4.096 (fmax -4.096 (+ (* DISPLAY_FPS_RATIO -0.2048) (-> self y-accel)))))
           (set! (-> self y-vel) (fmin f28-0 (fmax f30-0 (+ (-> self y-vel) (* DISPLAY_FPS_RATIO (-> self y-accel))))))
           ;; tell linked platforms to go up
           (send-to-all-after (-> self link) 'grow)
           (send-to-all-before (-> self link) 'grow)
           )
          ((-> self got-grow)
           ;; got 'grow' signal, accelerate upwards
           (set! (-> self got-grow) #f)
           (set! (-> self y-accel) (fmin 4.096 (fmax -4.096 (+ (* DISPLAY_FPS_RATIO 0.2048) (-> self y-accel)))))
           (set! (-> self y-vel) (fmin f28-0 (fmax f30-0 (+ (-> self y-vel) (* DISPLAY_FPS_RATIO (-> self y-accel))))))
           )
          ((< (-> self y-offset) 0.0)
           ;; accelerate towards neutral position (from below)
           (set! (-> self y-accel)
                 (fmin (fmin 4.096 (fmax -4.096 (+ (* DISPLAY_FPS_RATIO 0.1024) (-> self y-accel)))) (* -0.0001 (-> self y-offset)))
                 )
           (set! (-> self y-vel) (fmin f28-0 (fmax f30-0 (+ (-> self y-vel) (* DISPLAY_FPS_RATIO (-> self y-accel))))))
           ;; slow down
           (set! (-> self y-vel) (* (- 1.0 (* DISPLAY_FPS_RATIO (- 1.0 0.99))) (-> self y-vel)))
           )
          (else
            ;; accelerate towards neutral position (from above)
            (set! (-> self y-accel)
                  (fmin 4.096 (fmax (fmax -4.096 (+ (* DISPLAY_FPS_RATIO -0.1024) (-> self y-accel))) (* -0.0001 (-> self y-offset))))
                  )
            (set! (-> self y-vel) (fmin f28-0 (fmax f30-0 (+ (-> self y-vel) (* DISPLAY_FPS_RATIO (-> self y-accel))))))
            ;; slow down
            (set! (-> self y-vel) (* (- 1.0 (* DISPLAY_FPS_RATIO (- 1.0 0.99))) (-> self y-vel)))
            )
          )
        )
      (+! (-> self y-offset) (* DISPLAY_FPS_RATIO (-> self y-vel)))
      (set! (-> self root-override trans y) (+ (-> self y-init) (-> self y-offset)))
      (suspend)
      )
    )
  :post rider-post
  )

(defmethod init-from-entity! balance-plat ((this balance-plat) (arg0 entity-actor))
  ;; og:preserve-this PAL patch here. usually-hit-by-player -> hit-by-others
  (logior! (-> this mask) (process-mask platform))
  (let ((s4-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-others))))
    (set! (-> s4-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s4-0 reaction) default-collision-reaction)
    (set! (-> s4-0 no-reaction)
          (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing)
          )
    (alloc-riders s4-0 1)
    (let ((s3-0 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s3-0 prim-core collide-as) (collide-kind ground-object))
      (set! (-> s3-0 collide-with) (collide-kind target))
      (set! (-> s3-0 prim-core action) (collide-action solid rider-plat-sticky))
      (set! (-> s3-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s3-0 transform-index) 3)
      (set-vector! (-> s3-0 local-sphere) 0.0 0.0 0.0 40960.0)
      (set-root-prim! s4-0 s3-0)
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (backup-collide-with-as s4-0)
    (set! (-> this root-override) s4-0)
    )
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *balance-plat-sg* '())
  (set! (-> this link) (new 'process 'actor-link-info this))
  (set! (-> this y-accel) 0.0)
  (set! (-> this y-vel) 0.0)
  (set! (-> this y-offset) 0.0)
  (set! (-> this y-init) (-> this root-override trans y))
  (set! (-> this got-grow) #f)
  (set! (-> this y-travel) (res-lump-float arg0 'distance :default 20480.0))
  (go balance-plat-idle)
  (none)
  )