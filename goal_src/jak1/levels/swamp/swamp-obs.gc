;;-*-Lisp-*-
(in-package goal)

;; name: swamp-obs.gc
;; name in dgo: swamp-obs
;; dgos: L1, SWA
;; note: changed for high fps

(deftype swamp-rock (process-drawable)
  ((root  collide-shape-moving :override)
   )
  (:states
    swamp-rock-break
    swamp-rock-idle
    )
  )


(defpartgroup group-swamp-rock-explosion
  :id 291
  :duration (seconds 1)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 1330 :period (seconds 5) :length (seconds 0.017))
    (sp-item 1331 :period (seconds 5) :length (seconds 0.017))
    (sp-item 1332 :period (seconds 5) :length (seconds 0.05))
    )
  )

(defpart 1331
  :init-specs ((:texture (new 'static 'texture-id :index #x12 :page #x2))
    (:num 1.0)
    (:scale-x (meters 15))
    (:scale-y :copy scale-x)
    (:r 130.0)
    (:g 64.0)
    (:b 54.0)
    (:a 128.0)
    (:fade-a -2.1333334)
    (:timer (seconds 0.2))
    (:flags (bit2 bit3))
    )
  )

(defpart 1330
  :init-specs ((:texture (new 'static 'texture-id :index #x1d :page #x2))
    (:num 16.0 16.0)
    (:scale-x (meters 0.1) (meters 0.3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 70.0 16.0)
    (:g 70.0 16.0)
    (:b 70.0)
    (:a 128.0)
    (:vel-y (meters 0.04) (meters 0.04))
    (:rotvel-z (degrees -1.2) (degrees 2.4))
    (:accel-y (meters -0.0026666666))
    (:friction 0.99)
    (:timer (seconds 1))
    (:flags (bit2))
    (:userdata 0.0)
    (:func 'check-water-level-drop)
    (:conerot-x (degrees 20) (degrees 50.000004))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defpart 1332
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 16.0)
    (:y (meters 0.5) (meters 1))
    (:scale-x (meters 2.5) (meters 1.5))
    (:scale-y :copy scale-x)
    (:r 96.0 64.0)
    (:g 64.0 48.0)
    (:b 64.0 16.0)
    (:a 16.0 32.0)
    (:vel-y (meters 0.016666668) (meters 0.016666668))
    (:scalevel-x (meters 0.013333334))
    (:scalevel-y (meters 0.0033333334))
    (:accel-y (meters -0.00026666667))
    (:friction 0.95)
    (:timer (seconds 2))
    (:flags (bit2))
    (:next-time (seconds 0.1) (seconds 0.997))
    (:next-launcher 1333)
    (:conerot-x (degrees 70) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defpart 1333
  :init-specs ((:fade-a -0.2))
  )

(defskelgroup *swamp-rock-sg* swamp-rock swamp-rock-lod0-jg swamp-rock-idle-ja
              ((swamp-rock-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 3)
              )

(defstate swamp-rock-break (swamp-rock)
  :code (behavior ()
    (process-entity-status! self (entity-perm-status complete) #t)
    (sound-play "rock-break")
    (process-spawn
      part-tracker
      :init part-tracker-init
      (-> *part-group-id-table* 291)
      -1
      #f
      #f
      #f
      (-> self root trans)
      :to *entity-pool*
      )
    (cleanup-for-death self)
    (deactivate self)
    )
  :post ja-post
  )

(defstate swamp-rock-idle (swamp-rock)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('attack)
       (if (and (>= argc 2) (= (-> block param 1) 'eco-yellow))
           (go swamp-rock-break)
           )
       )
      )
    )
  :code (behavior ()
    (transform-post)
    (loop
      (logior! (-> self mask) (process-mask sleep))
      (suspend)
      )
    )
  )

(defmethod init-from-entity! ((this swamp-rock) (arg0 entity-actor))
  (logior! (-> this mask) (process-mask attackable))
  (let ((f30-0 (res-lump-float arg0 'scale-factor :default 1.0)))
    (let ((s4-0 (new 'process 'collide-shape this (collide-list-enum usually-hit-by-player))))
      (let ((s3-0 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
        (set! (-> s3-0 prim-core collide-as) (collide-kind wall-object))
        (set! (-> s3-0 collide-with) (collide-kind target))
        (set! (-> s3-0 prim-core action) (collide-action solid))
        (set! (-> s3-0 prim-core offense) (collide-offense indestructible))
        (set! (-> s3-0 transform-index) 3)
        (set-vector! (-> s3-0 local-sphere) 0.0 (* 4096.0 f30-0) 0.0 (* 4096.0 (* 3.0 f30-0)))
        (set-root-prim! s4-0 s3-0)
        )
      (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
      (backup-collide-with-as s4-0)
      (set! (-> this root) (the-as collide-shape-moving s4-0))
      )
    (process-drawable-from-entity! this arg0)
    (vector-float*! (-> this root scale) *identity-vector* f30-0)
    )
  (initialize-skeleton this *swamp-rock-sg* '())
  (nav-mesh-connect this (-> this root) (the-as nav-control #f))
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 291) this))
  (go swamp-rock-idle)
  (none)
  )

(defbehavior swamp-rock-init-by-other swamp-rock ((arg0 vector))
  (logior! (-> self mask) (process-mask attackable))
  (let ((s5-0 (new 'process 'collide-shape-moving self (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) default-collision-reaction)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing)
          )
    (alloc-riders s5-0 1)
    (let ((s4-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s4-0 prim-core collide-as) (collide-kind wall-object))
      (set! (-> s4-0 collide-with) (collide-kind target))
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set! (-> s4-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s4-0 transform-index) 3)
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 12288.0)
      (set-root-prim! s5-0 s4-0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (backup-collide-with-as s5-0)
    (set! (-> self root) s5-0)
    )
  (set! (-> self root trans quad) (-> arg0 quad))
  (initialize-skeleton self *swamp-rock-sg* '())
  (nav-mesh-connect self (-> self root) (the-as nav-control #f))
  (set! (-> self part) (create-launch-control (-> *part-group-id-table* 291) self))
  (go swamp-rock-idle)
  (none)
  )

(deftype swamp-barrel (barrel)
  ()
  )


(deftype swampcam (process-hidden)
  ()
  )


(defskelgroup *swampcam-sg* swampcam swampcam-lod0-jg swampcam-anim-ja
              ((swampcam-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 15)
              )

(deftype swamp-battlecontroller (battlecontroller)
  ()
  )


(defstate battlecontroller-play-intro-camera (swamp-battlecontroller)
  :virtual #t
  :code (behavior ()
    (suspend)
    (process-drawable-delay-player (seconds 1))
    (let ((gp-1 (ppointer->handle
                  (process-spawn pov-camera (-> self root trans) *swampcam-sg* "swamp-ambush" 0 #f '() :to self)
                  )
                )
          )
      (while (handle->process (the-as handle gp-1))
        (suspend)
        )
      )
    (go-virtual battlecontroller-active)
    )
  )

(defstate battlecontroller-die (swamp-battlecontroller)
  :virtual #t
  :code (behavior ()
    (process-entity-status! self (entity-perm-status complete) #t)
    ((the-as
       (function none :behavior battlecontroller)
       (-> (method-of-type battlecontroller battlecontroller-die) code)
       )
     )
    )
  )
