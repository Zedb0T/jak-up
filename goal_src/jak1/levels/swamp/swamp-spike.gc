;;-*-Lisp-*-
(in-package goal)

;; name: originally in swamp-obs.gc
;; name in dgo: swamp-obs
;; dgos: L1, SWA
;; note: changed for high fps

(declare-type swampgate swamp-spike)

(define-extern swamp-spike-gate-down (state swampgate))

;; DECOMP BEGINS

(defpartgroup group-swamp-spike-up
  :id 289
  :duration (seconds 0.017)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 1325 :fade-after (meters 120) :falloff-to (meters 120))
    (sp-item 1326 :fade-after (meters 120) :falloff-to (meters 120))
    (sp-item 1327 :fade-after (meters 60) :falloff-to (meters 60))
    )
  )

(defpart 1325
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 16.0)
    (:x (meters -2) 2 (meters 2))
    (:y (meters 0.75))
    (:scale-x (meters 1.5) (meters 1))
    (:scale-y :copy scale-x)
    (:r 64.0 32.0)
    (:g 48.0 24.0)
    (:b 48.0 8.0)
    (:a 16.0 32.0)
    (:vel-y (meters 0.006666667) (meters 0.01))
    (:scalevel-x (meters 0.01))
    (:accel-y (meters -0.000033333334) (meters -0.00006666667))
    (:friction 0.96)
    (:timer (seconds 1.5))
    (:flags (bit2))
    (:next-time (seconds 0.1) (seconds 0.997))
    (:next-launcher 1328)
    (:conerot-x (degrees 70) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    (:rotate-y (degrees -179.3918))
    )
  )

(defpart 1328
  :init-specs ((:fade-a -0.32))
  )

(defpart 1326
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 16.0)
    (:x (meters -2) 2 (meters 2))
    (:y (meters -0.75))
    (:scale-x (meters 1.5) (meters 1))
    (:scale-y :copy scale-x)
    (:r 32.0 16.0)
    (:g 36.0 18.0)
    (:b 24.0 4.0)
    (:a 16.0 32.0)
    (:vel-y (meters 0.006666667) (meters 0.01))
    (:scalevel-x (meters 0.01))
    (:accel-y (meters 0.000033333334) (meters 0.00006666667))
    (:friction 0.96)
    (:timer (seconds 1.5))
    (:flags (bit2))
    (:next-time (seconds 0.1) (seconds 0.997))
    (:next-launcher 1328)
    (:conerot-x (degrees 90) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    (:rotate-y (degrees -179.3918))
    )
  )

(defpart 1327
  :init-specs ((:texture (new 'static 'texture-id :index #x1d :page #x2))
    (:num 8.0)
    (:x (meters -2) 2 (meters 2))
    (:y (meters 0.25))
    (:scale-x (meters 0.1) (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 64.0 16.0)
    (:g 48.0 16.0)
    (:b 48.0 16.0)
    (:a 128.0)
    (:vel-y (meters 0.053333335) (meters 0.026666667))
    (:accel-y (meters -0.0033333334))
    (:friction 0.96)
    (:timer (seconds 0.5))
    (:flags (bit2))
    (:userdata 0.0)
    (:func 'check-water-level-drop)
    (:next-time (seconds 1.3))
    (:next-launcher 1329)
    (:conerot-x (degrees 30) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    (:rotate-y (degrees -179.3918))
    )
  )

(defpartgroup group-swamp-spike-down
  :id 290
  :duration (seconds 0.017)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 1325 :fade-after (meters 120) :falloff-to (meters 120))
    (sp-item 1326 :fade-after (meters 120) :falloff-to (meters 120))
    )
  )

(deftype swamp-spike (process-drawable)
  ((root       collide-shape :override)
   (sync       sync-info      :inline)
   (open-gate  symbol)
   (dangerous  symbol)
   )
  (:methods
    (init! (_type_) symbol)
    )
  (:states
    swamp-spike-idle
    )
  )


(defskelgroup *swamp-spike-sg* swamp-spike swamp-spike-lod0-jg swamp-spike-up-ja
              ((swamp-spike-lod0-mg (meters 20)) (swamp-spike-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 5 0 6)
              :longest-edge (meters 2.5)
              )

(defbehavior swamp-spike-default-event-handler swamp-spike ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('touch)
     (when (-> self dangerous)
       (if ((method-of-type touching-shapes-entry prims-touching?)
            (the-as touching-shapes-entry (-> arg3 param 0))
            (the-as collide-shape-moving (-> self root))
            (the-as uint 1)
            )
           (send-event arg0 'attack (-> arg3 param 0) (new 'static 'attack-info))
           )
       )
     )
    )
  )

(defun swamp-spike-set-particle-rotation-callback ((arg0 part-tracker))
  (let* ((v1-0 (the-as object (-> arg0 userdata)))
         (f0-1 (+ -65314.562 (quaternion-y-angle (-> (the-as (pointer swamp-spike) v1-0) 0 root quat))))
         )
    (set! (-> *part-id-table* 1325 init-specs 20 initial-valuef) f0-1)
    (set! (-> *part-id-table* 1326 init-specs 20 initial-valuef) f0-1)
    (set! (-> *part-id-table* 1327 init-specs 21 initial-valuef) f0-1)
    )
  0
  (none)
  )

(defbehavior swamp-spike-post swamp-spike ()
  (transform-post)
  (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
    (set! (-> a1-0 to) (the-as process 1))
    (set! (-> a1-0 from) (the-as process *touching-list*))
    (if (find-overlapping-shapes (-> self root) (the-as overlaps-others-params a1-0))
        (do-push-aways! (-> self root))
        )
    )
  (none)
  )

(defstate swamp-spike-idle (swamp-spike)
  :event swamp-spike-default-event-handler
  :code (behavior ()
    (set! (-> self dangerous) #f)
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (new 'stack-no-clear 'vector)
      (vector-z-quaternion! gp-0 (-> self root quat))
      (set! (-> gp-0 w) (- (vector-dot gp-0 (-> self root trans))))
      (loop
        (set-time! (-> self state-time))
        (ja :group! swamp-spike-up-ja)
        (until (>= (get-current-phase (-> self sync)) 0.5)
          (ja :num-func num-func-identity :frame-num 0.0)
          (suspend)
          )
        (let ((s5-0
                (or (not *target*) (< 204800.0 (vector-vector-distance (-> self root trans) (-> *target* control trans))))
                )
              )
          (if (and (and *target* (>= 61440.0 (vector-vector-distance (-> self root trans) (-> *target* control trans))))
                   *camera*
                   )
              (set! s5-0 (< (* (vector4-dot gp-0 (target-pos 0)) (vector4-dot gp-0 (camera-pos))) 0.0))
              )
          (cond
            (s5-0
              (until (< (get-current-phase (-> self sync)) 0.5)
                (suspend)
                )
              )
            (else
              (ja-no-eval :group! swamp-spike-shake-ja :num! (seek!) :frame-num 0.0)
              (until (ja-done? 0)
                (suspend)
                (ja :num! (seek!))
                )
              (if (logtest? (-> self draw status) (draw-status was-drawn))
                  (process-spawn
                    part-tracker
                    :init part-tracker-init
                    (-> *part-group-id-table* 289)
                    -1
                    swamp-spike-set-particle-rotation-callback
                    (-> self ppointer)
                    #f
                    (-> self root trans)
                    :to self
                    )
                  )
              (set! (-> self dangerous) #t)
              (ja-no-eval :group! swamp-spike-up-ja :num! (seek!) :frame-num 0.0)
              (until (ja-done? 0)
                (suspend)
                (ja :num! (seek!))
                )
              (set! (-> self dangerous) #f)
              (set-time! (-> self state-time))
              (ja :num-func num-func-identity :frame-num max)
              (until (< (get-current-phase (-> self sync)) 0.5)
                (suspend)
                )
              (if (logtest? (-> self draw status) (draw-status was-drawn))
                  (process-spawn
                    part-tracker
                    :init part-tracker-init
                    (-> *part-group-id-table* 290)
                    -1
                    swamp-spike-set-particle-rotation-callback
                    (-> self ppointer)
                    #f
                    (-> self root trans)
                    :to self
                    )
                  )
              (ja-no-eval :group! swamp-spike-down-ja :num! (seek!) :frame-num 0.0)
              (until (ja-done? 0)
                (suspend)
                (ja :num! (seek!))
                )
              )
            )
          )
        )
      )
    )
  :post swamp-spike-post
  )

(defstate swamp-spike-gate-up (swampgate)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('trigger)
       (let ((v0-0 #t))
         (set! (-> self open-gate) v0-0)
         v0-0
         )
       )
      )
    )
  :code (behavior ()
    (set-time! (-> self state-time))
    (ja :group! swamp-spike-down-ja)
    (until (-> self open-gate)
      (ja :num-func num-func-identity :frame-num 0.0)
      (suspend)
      )
    (process-spawn
      part-tracker
      :init part-tracker-init
      (-> *part-group-id-table* 290)
      -1
      swamp-spike-set-particle-rotation-callback
      (-> self ppointer)
      #f
      (-> self root trans)
      :to self
      )
    (ja-no-eval :group! swamp-spike-down-ja :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (go swamp-spike-gate-down)
    )
  :post swamp-spike-post
  )

(defstate swamp-spike-gate-down (swampgate)
  :code (behavior ()
    (process-entity-status! self (entity-perm-status complete) #t)
    (cleanup-for-death self)
    )
  :post swamp-spike-post
  )

(defmethod init! ((this swamp-spike))
  (let ((s5-0 (new 'process 'collide-shape this (collide-list-enum usually-hit-by-player))))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s4-0 prim-core collide-as) (collide-kind wall-object))
      (set! (-> s4-0 collide-with) (collide-kind target))
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 20480.0 0.0 24576.0)
      (set-root-prim! s5-0 s4-0)
      (let ((s3-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 1))))
        (set! (-> s3-0 prim-core collide-as) (collide-kind wall-object))
        (set! (-> s3-0 collide-with) (collide-kind target))
        (set! (-> s3-0 prim-core action) (collide-action solid))
        (set! (-> s3-0 prim-core offense) (collide-offense indestructible))
        (set! (-> s3-0 transform-index) 3)
        (set-vector! (-> s3-0 local-sphere) 0.0 20480.0 0.0 24576.0)
        (append-prim s4-0 s3-0)
        )
      (let ((s3-1 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 1) (the-as uint 0))))
        (set! (-> s3-1 prim-core collide-as) (collide-kind wall-object))
        (set! (-> s3-1 collide-with) (collide-kind target))
        (set! (-> s3-1 prim-core action) (collide-action solid))
        (set! (-> s3-1 prim-core offense) (collide-offense indestructible))
        (set! (-> s3-1 transform-index) 3)
        (set-vector! (-> s3-1 local-sphere) 0.0 20480.0 0.0 24576.0)
        (append-prim s4-0 s3-1)
        )
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (backup-collide-with-as s5-0)
    (set! (-> this root) s5-0)
    )
  (process-drawable-from-entity! this (-> this entity))
  (initialize-skeleton this *swamp-spike-sg* '())
  (set! (-> this draw origin-joint-index) (the-as uint 3))
  (load-params! (-> this sync) this (the-as uint 1500) 0.0 0.15 0.15)
  (set! (-> this open-gate) #f)
  (set! (-> this dangerous) #f)
  #f
  )

(defmethod init-from-entity! ((this swamp-spike) (arg0 entity-actor))
  (init! this)
  (go swamp-spike-idle)
  (none)
  )

(deftype swampgate (swamp-spike)
  ()
  (:states
    swamp-spike-gate-down
    swamp-spike-gate-up
    )
  )


(defmethod init-from-entity! ((this swampgate) (arg0 entity-actor))
  (init! this)
  (if (logtest? (-> arg0 extra perm status) (entity-perm-status complete))
      (go swamp-spike-gate-down)
      (go swamp-spike-gate-up)
      )
  (none)
  )
