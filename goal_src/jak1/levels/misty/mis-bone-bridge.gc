;;-*-Lisp-*-
(in-package goal)

;; originally in:
;; name: misty-obs.gc
;; name in dgo: misty-obs
;; dgos: L1, MIS

(defpartgroup group-misty-bone-01
  :id 192
  :duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 24)
  :parts ((sp-item 914 :period (seconds 2.6) :length (seconds 0.05))
    (sp-item 915 :period (seconds 2.6) :length (seconds 0.05))
    (sp-item 916 :period (seconds 2.6) :length (seconds 0.215))
    (sp-item 917 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 918 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 919 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 920 :period (seconds 2.6) :length (seconds 0.107) :offset 65056)
    (sp-item 921 :period (seconds 2.6) :length (seconds 0.107) :offset 64996)
    )
  )

(defpart 921
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 16.0)
    (:vel-y (meters -0.01) (meters 0.04))
    (:vel-z (meters -0.023333333) (meters 0.046666667))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -80))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 187))
    )
  )

(defpart 920
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters 2.5))
    (:y (meters 1) (meters 1))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 32.0 16.0)
    (:vel-y (meters 0.006666667) (meters 0.013333334))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.16)
    (:accel-y (meters 0.000033333334))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-x (degrees 80) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 2))
    (:rotate-y (degrees 187))
    )
  )

(defpart 919
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 16.0)
    (:vel-y (meters -0.01) (meters 0.04))
    (:vel-z (meters -0.023333333) (meters 0.046666667))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -80))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 187))
    )
  )

(defpart 918
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 8.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 0.05) (meters 0.2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 64.0 32.0)
    (:vel-x (meters -0.026666667) (meters 0.013333334))
    (:vel-y (meters -0.013333334) (meters 0.053333335))
    (:vel-z (meters -0.033333335) (meters 0.06666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:accel-y (meters -0.0016666667))
    (:friction 0.996)
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:next-time (seconds 0.3))
    (:next-launcher 922)
    (:conerot-z (degrees -80))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 187))
    )
  )

(defpart 922
  :init-specs ((:fade-a -1.0666667))
  )

(defpart 917
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 8.0)
    (:y (meters -1) (meters 1.5))
    (:z (meters -5) (meters 10))
    (:scale-x (meters 2) (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 8.0)
    (:vel-y (meters -0.0016666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:fade-a -0.026666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 3))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -80))
    (:conerot-radius (meters 4) (meters 16))
    (:rotate-y (degrees 187))
    )
  )

(defpart 914
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:y (meters 1) (meters 1))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 32.0 16.0)
    (:vel-y (meters 0.006666667) (meters 0.013333334))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.16)
    (:accel-y (meters 0.000033333334))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-x (degrees 80) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 2))
    (:rotate-y (degrees 140))
    )
  )

(defpart 915
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 8.0)
    (:y (meters 1) (meters 1))
    (:scale-x (meters 0.05) (meters 0.2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 64.0 32.0)
    (:vel-y (meters 0.04) (meters 0.026666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:accel-y (meters -0.0016666667))
    (:friction 0.996)
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:next-time (seconds 0.3))
    (:next-launcher 923)
    (:conerot-x (degrees 70) (degrees 30))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 2))
    (:rotate-y (degrees 140))
    )
  )

(defpart 923
  :init-specs ((:fade-a -3.2))
  )

(defpart 916
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 2.0)
    (:x (meters -3.5) (meters 4.5))
    (:y (meters 1) (meters 12))
    (:z (meters -3) (meters 6))
    (:scale-x (meters 2) (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 8.0 8.0)
    (:vel-y (meters -0.0016666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:fade-a -0.017777778)
    (:accel-y (meters -0.0001))
    (:timer (seconds 3))
    (:flags (bit2 bit12))
    (:rotate-y (degrees 187))
    )
  )

(defpartgroup group-misty-bone-03
  :id 193
  :duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 24)
  :parts ((sp-item 914 :period (seconds 2.6) :length (seconds 0.05))
    (sp-item 915 :period (seconds 2.6) :length (seconds 0.05))
    (sp-item 924 :period (seconds 2.6) :length (seconds 0.215))
    (sp-item 925 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 926 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 927 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 928 :period (seconds 2.6) :length (seconds 0.107) :offset 65056)
    (sp-item 929 :period (seconds 2.6) :length (seconds 0.107) :offset 64996)
    )
  )

(defpart 929
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 16.0)
    (:vel-y (meters -0.01) (meters 0.04))
    (:vel-z (meters -0.023333333) (meters 0.046666667))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -80))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 249.99998))
    )
  )

(defpart 928
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters 2.5))
    (:y (meters 1) (meters 1))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 32.0 16.0)
    (:vel-y (meters 0.006666667) (meters 0.013333334))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.16)
    (:accel-y (meters 0.000033333334))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-x (degrees 80) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 2))
    (:rotate-y (degrees 249.99998))
    )
  )

(defpart 927
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 16.0)
    (:vel-y (meters -0.01) (meters 0.04))
    (:vel-z (meters -0.023333333) (meters 0.046666667))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -80))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 249.99998))
    )
  )

(defpart 926
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 8.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 0.05) (meters 0.2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 64.0 32.0)
    (:vel-x (meters -0.026666667) (meters 0.013333334))
    (:vel-y (meters -0.013333334) (meters 0.053333335))
    (:vel-z (meters -0.033333335) (meters 0.06666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:accel-y (meters -0.0016666667))
    (:friction 0.996)
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:next-time (seconds 0.3))
    (:next-launcher 922)
    (:conerot-z (degrees -80))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 249.99998))
    )
  )

(defpart 925
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 8.0)
    (:y (meters -1) (meters 1.5))
    (:z (meters -5) (meters 10))
    (:scale-x (meters 2) (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 8.0)
    (:vel-y (meters -0.0016666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:fade-a -0.026666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 3))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -80))
    (:conerot-radius (meters 4) (meters 16))
    (:rotate-y (degrees 249.99998))
    )
  )

(defpart 924
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 2.0)
    (:x (meters -3.5) (meters 4.5))
    (:y (meters 1) (meters 12))
    (:z (meters -3) (meters 6))
    (:scale-x (meters 2) (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 8.0 8.0)
    (:vel-y (meters -0.0016666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:fade-a -0.017777778)
    (:accel-y (meters -0.0001))
    (:timer (seconds 3))
    (:flags (bit2 bit12))
    (:rotate-y (degrees 249.99998))
    )
  )

(defpartgroup group-misty-bone-02
  :id 194
  :duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 24)
  :parts ((sp-item 914 :period (seconds 2.6) :length (seconds 0.05))
    (sp-item 915 :period (seconds 2.6) :length (seconds 0.05))
    (sp-item 930 :period (seconds 2.6) :length (seconds 0.215))
    (sp-item 931 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 932 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 933 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 934 :period (seconds 2.6) :length (seconds 0.107) :offset 65056)
    (sp-item 935 :period (seconds 2.6) :length (seconds 0.107) :offset 64996)
    )
  )

(defpart 935
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 16.0)
    (:vel-y (meters -0.01) (meters 0.04))
    (:vel-z (meters -0.023333333) (meters 0.046666667))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -94))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 114))
    )
  )

(defpart 934
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters 2.5))
    (:y (meters 1) (meters 1))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 32.0 16.0)
    (:vel-y (meters 0.006666667) (meters 0.013333334))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.16)
    (:accel-y (meters 0.000033333334))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-x (degrees 80) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 2))
    (:rotate-y (degrees 114))
    )
  )

(defpart 933
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 16.0)
    (:vel-y (meters -0.01) (meters 0.04))
    (:vel-z (meters -0.023333333) (meters 0.046666667))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -94))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 114))
    )
  )

(defpart 932
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 8.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 0.05) (meters 0.2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 64.0 32.0)
    (:vel-x (meters -0.026666667) (meters 0.013333334))
    (:vel-y (meters -0.013333334) (meters 0.053333335))
    (:vel-z (meters -0.033333335) (meters 0.06666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:accel-y (meters -0.0016666667))
    (:friction 0.996)
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:next-time (seconds 0.3))
    (:next-launcher 922)
    (:conerot-z (degrees -94))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 114))
    )
  )

(defpart 931
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 8.0)
    (:y (meters -1) (meters 1.5))
    (:z (meters -5) (meters 10))
    (:scale-x (meters 2) (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 8.0)
    (:vel-y (meters -0.0016666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:fade-a -0.026666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 3))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -90))
    (:conerot-radius (meters 4) (meters 16))
    (:rotate-y (degrees 114))
    )
  )

(defpart 930
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 2.0)
    (:x (meters -3.5) (meters 4.5))
    (:y (meters 1) (meters 12))
    (:z (meters -3) (meters 6))
    (:scale-x (meters 2) (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 8.0 8.0)
    (:vel-y (meters -0.0016666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:fade-a -0.017777778)
    (:accel-y (meters -0.0001))
    (:timer (seconds 3))
    (:flags (bit2 bit12))
    (:rotate-y (degrees 114))
    )
  )

(defpartgroup group-misty-bone-07
  :id 195
  :duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 24)
  :parts ((sp-item 914 :period (seconds 2.6) :length (seconds 0.05))
    (sp-item 915 :period (seconds 2.6) :length (seconds 0.05))
    (sp-item 936 :period (seconds 2.6) :length (seconds 0.215))
    (sp-item 937 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 938 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 939 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 940 :period (seconds 2.6) :length (seconds 0.107) :offset 65056)
    (sp-item 941 :period (seconds 2.6) :length (seconds 0.107) :offset 64966)
    )
  )

(defpart 941
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 16.0)
    (:vel-y (meters -0.01) (meters 0.04))
    (:vel-z (meters -0.023333333) (meters 0.046666667))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -94))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 14.000005))
    )
  )

(defpart 940
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters 2.5))
    (:y (meters 1) (meters 1))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 32.0 16.0)
    (:vel-y (meters 0.006666667) (meters 0.013333334))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.16)
    (:accel-y (meters 0.000033333334))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-x (degrees 80) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 2))
    (:rotate-y (degrees 14.000005))
    )
  )

(defpart 939
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 16.0)
    (:vel-y (meters -0.01) (meters 0.04))
    (:vel-z (meters -0.023333333) (meters 0.046666667))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -94))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 14.000005))
    )
  )

(defpart 938
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 8.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 0.05) (meters 0.2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 64.0 32.0)
    (:vel-x (meters -0.026666667) (meters 0.013333334))
    (:vel-y (meters -0.013333334) (meters 0.053333335))
    (:vel-z (meters -0.033333335) (meters 0.06666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:accel-y (meters -0.0016666667))
    (:friction 0.996)
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:next-time (seconds 0.3))
    (:next-launcher 922)
    (:conerot-z (degrees -94))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 14.000005))
    )
  )

(defpart 937
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 8.0)
    (:y (meters -1) (meters 1.5))
    (:z (meters -5) (meters 10))
    (:scale-x (meters 2) (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 8.0)
    (:vel-y (meters -0.0016666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:fade-a -0.026666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 3))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -90))
    (:conerot-radius (meters 4) (meters 16))
    (:rotate-y (degrees 14.000005))
    )
  )

(defpart 936
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 2.0)
    (:x (meters -3.5) (meters 4.5))
    (:y (meters 1) (meters 12))
    (:z (meters -3) (meters 6))
    (:scale-x (meters 2) (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 8.0 8.0)
    (:vel-y (meters -0.0016666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:fade-a -0.017777778)
    (:accel-y (meters -0.0001))
    (:timer (seconds 3))
    (:flags (bit2 bit12))
    (:rotate-y (degrees 14.000005))
    )
  )

(deftype mis-bone-bridge (process-drawable)
  ((root-override    collide-shape-moving    :offset        112)
   (particle-group   sparticle-launch-group  :offset-assert 176)
   (player-attack-id int32                   :offset-assert 180)
   (fall-anim-index  int32                   :offset-assert 184)
   (hit-points       int8                    :offset-assert 188)
   )
  :heap-base #x50
  :method-count-assert 20
  :size-assert         #xbd
  :flag-assert         #x14005000bd
  (:states
    mis-bone-bridge-bump
    (mis-bone-bridge-fall symbol)
    mis-bone-bridge-hit
    mis-bone-bridge-idle
    )
  )


(defskelgroup *mis-bone-bridge-sg* mis-bone-bridge mis-bone-bridge-lod0-jg mis-bone-bridge-idle-ja
              ((mis-bone-bridge-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 1 0 20)
              )

(defbehavior mis-bone-bridge-event-handler mis-bone-bridge ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('attack)
     (let ((s5-0 (-> arg3 param 2))
           (gp-0 (vector-x-quaternion! (new-stack-vector0) (-> self root-override quat)))
           (a0-4 (vector-z-quaternion! (new-stack-vector0) (-> self root-override quat)))
           (v1-4 (vector-! (new-stack-vector0) (-> *target* control trans) (-> self root-override trans)))
           )
       0.0
       0.0
       (when (!= s5-0 (-> self player-attack-id))
         (set! (-> self player-attack-id) (the-as int s5-0))
         (let ((f0-3 (vector-dot gp-0 v1-4))
               (f1-1 (vector-dot a0-4 v1-4))
               )
           (cond
             ((and (< 0.0 f1-1) (< (fabs (* 0.5 f0-3)) f1-1))
              (if (send-event *target* 'query 'powerup (pickup-type eco-red))
                  (go mis-bone-bridge-fall #f)
                  (go mis-bone-bridge-hit)
                  )
              )
             (else
               (go mis-bone-bridge-bump)
               #f
               )
             )
           )
         )
       )
     )
    )
  )

(defstate mis-bone-bridge-idle (mis-bone-bridge)
  :event mis-bone-bridge-event-handler
  :code (behavior ()
    (ja :num-func num-func-identity :frame-num 0.0)
    (loop
      (if (and *target* (>= 32768.0 (vector-vector-distance (-> self root-override trans) (-> *target* control trans))))
          (level-hint-spawn
            (text-id misty-bone-bridge-hint)
            "sksp0435"
            (the-as entity #f)
            *entity-pool*
            (game-task none)
            )
          )
      (suspend)
      )
    (none)
    )
  :post (the-as (function none :behavior mis-bone-bridge) transform-post)
  )

(defstate mis-bone-bridge-bump (mis-bone-bridge)
  :event mis-bone-bridge-event-handler
  :trans (the-as (function none :behavior mis-bone-bridge) rider-trans)
  :code (behavior ()
    (ja-no-eval :group! (-> self draw art-group data 6) :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (go mis-bone-bridge-idle)
    (none)
    )
  :post (the-as (function none :behavior mis-bone-bridge) rider-post)
  )

(defstate mis-bone-bridge-hit (mis-bone-bridge)
  :event mis-bone-bridge-event-handler
  :trans (the-as (function none :behavior mis-bone-bridge) rider-trans)
  :code (behavior ()
    (+! (-> self hit-points) -1)
    (if (zero? (-> self hit-points))
        (go mis-bone-bridge-fall #f)
        )
    (ja-no-eval :group! (-> self draw art-group data 5) :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (go mis-bone-bridge-idle)
    (none)
    )
  :post (the-as (function none :behavior mis-bone-bridge) rider-post)
  )

(defstate mis-bone-bridge-fall (mis-bone-bridge)
  :trans (the-as (function none :behavior mis-bone-bridge) rider-trans)
  :code (behavior ((arg0 symbol))
    (process-entity-status! self (entity-perm-status complete) #t)
    (when (not arg0)
      (process-spawn
        part-tracker
        :init part-tracker-init
        (-> self particle-group)
        -1
        #f
        #f
        #f
        (-> self root-override trans)
        :to *entity-pool*
        )
      (ja-no-eval :group! (-> self draw art-group data (-> self fall-anim-index)) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    (ja :group! (-> self draw art-group data (-> self fall-anim-index))
        :num! (identity (the float (+ (-> (ja-group) data 0 length) -1)))
        )
    (loop
      (suspend)
      )
    (none)
    )
  :post (the-as (function none :behavior mis-bone-bridge) rider-post)
  )

(defmethod init-from-entity! mis-bone-bridge ((obj mis-bone-bridge) (arg0 entity-actor))
  (logior! (-> obj mask) (process-mask platform))
  (let ((s4-0 (new 'process 'collide-shape-moving obj (collide-list-enum hit-by-others))))
    (set! (-> s4-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s4-0 reaction) default-collision-reaction)
    (set! (-> s4-0 no-reaction)
          (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing)
          )
    (alloc-riders s4-0 1)
    (let ((s3-0 (new 'process 'collide-shape-prim-group s4-0 (the-as uint 2) 0)))
      (set! (-> s3-0 prim-core collide-as) (collide-kind ground-object))
      (set! (-> s3-0 collide-with) (collide-kind target))
      (set! (-> s3-0 prim-core action) (collide-action solid attackable attackable-unused))
      (set! (-> s3-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s3-0 transform-index) 0)
      (set-vector! (-> s3-0 local-sphere) 0.0 0.0 0.0 98304.0)
      (set-root-prim! s4-0 s3-0)
      (let ((s2-0 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
        (set! (-> s2-0 prim-core collide-as) (collide-kind ground-object))
        (set! (-> s2-0 collide-with) (collide-kind target))
        (set! (-> s2-0 prim-core action) (collide-action solid))
        (set! (-> s2-0 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-0 transform-index) 0)
        (set-vector! (-> s2-0 local-sphere) 0.0 0.0 0.0 9011.2)
        (append-prim s3-0 s2-0)
        )
      (let ((s2-1 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
        (set! (-> s2-1 prim-core collide-as) (collide-kind ground-object))
        (set! (-> s2-1 collide-with) (collide-kind target))
        (set! (-> s2-1 prim-core action) (collide-action solid))
        (set! (-> s2-1 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-1 transform-index) 4)
        (set-vector! (-> s2-1 local-sphere) 0.0 49152.0 0.0 49152.0)
        (append-prim s3-0 s2-1)
        )
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (backup-collide-with-as s4-0)
    (set! (-> obj root-override) s4-0)
    )
  (process-drawable-from-entity! obj arg0)
  (initialize-skeleton obj *mis-bone-bridge-sg* '())
  (let ((v1-40 (res-lump-value arg0 'animation-select uint128)))
    (cond
      ((= (the-as uint v1-40) 1)
       (set! (-> obj fall-anim-index) 2)
       (set! (-> obj particle-group) (-> *part-group-id-table* 192))
       )
      ((= (the-as uint v1-40) 2)
       (set! (-> obj fall-anim-index) 3)
       (set! (-> obj particle-group) (-> *part-group-id-table* 194))
       )
      ((= (the-as uint v1-40) 3)
       (set! (-> obj fall-anim-index) 2)
       (set! (-> obj particle-group) (-> *part-group-id-table* 193))
       )
      ((= (the-as uint v1-40) 7)
       (set! (-> obj fall-anim-index) 4)
       (set! (-> obj particle-group) (-> *part-group-id-table* 195))
       )
      (else
        (set! (-> obj fall-anim-index) 2)
        (set! (-> obj particle-group) (-> *part-group-id-table* 192))
        )
      )
    )
  (set! (-> obj hit-points) 3)
  (if (and (-> obj entity) (logtest? (-> obj entity extra perm status) (entity-perm-status complete)))
      (go mis-bone-bridge-fall #t)
      (go mis-bone-bridge-idle)
      )
  (none)
  )
