;;-*-Lisp-*-
(in-package goal)
(bundles "BEA.DGO")
(require "engine/common-obs/process-taskable.gc")
(require "engine/camera/pov-camera-h.gc")
(require "levels/beach/wobbler.gc")
(define-extern spawn-flying-rock (function vector vector float entity none))

;; DECOMP BEGINS

(defskelgroup *beachcam-sg*
  beachcam
  beachcam-lod0-jg
  beachcam-anim-ja
  ((beachcam-lod0-mg (meters 999999)))
  :bounds (static-spherem 0 0 0 60))

(defpartgroup group-beach-grotto-pole-rocks
  :id 155
  :flags (use-local-clock)
  :bounds (static-bspherem 0 -12 0 14)
  :parts
  ((sp-item 539 :period (seconds 5) :length (seconds 0.05))
   (sp-item 539 :period (seconds 5) :length (seconds 0.1))
   (sp-item 539 :period (seconds 5) :length (seconds 0.15))
   (sp-item 539 :period (seconds 5) :length (seconds 0.25))
   (sp-item 539 :period (seconds 5) :length (seconds 0.5))
   (sp-item 539 :period (seconds 5) :length (seconds 1))
   (sp-item 540 :period (seconds 5) :length (seconds 0.1))))

(defpart 539
  :init-specs
  ((:texture (new 'static 'texture-id :index #x1d :page #x2))
   (:num 0.5)
   (:x (meters -9) (meters 18))
   (:y (meters -6))
   (:z (meters -9) (meters 18))
   (:scale-x (meters 0.1) (meters 0.5))
   (:rot-z (degrees 0) (degrees 360))
   (:scale-y :copy scale-x)
   (:r 32.0 40.0)
   (:g 32.0 40.0)
   (:b 32.0 40.0)
   (:a 128.0)
   (:vel-y (meters 0) (meters -0.04))
   (:rotvel-z (degrees -0.3) (degrees 0.6))
   (:accel-y (meters -0.0016666667) (meters -0.00016666666))
   (:timer (seconds 1.3))
   (:flags (bit2))
   (:userdata 0.0)
   (:func 'check-water-level-drop)))

(defpart 540
  :init-specs
  ((:texture (new 'static 'texture-id :page #x2))
   (:num 12.0)
   (:y (meters -7))
   (:scale-x (meters 3) (meters 4.5))
   (:rot-z (degrees 0) (degrees 360))
   (:scale-y :copy scale-x)
   (:r 48.0 16.0)
   (:g 48.0)
   (:b 48.0)
   (:a 0.0)
   (:vel-y (meters 0) (meters 0.006666667))
   (:rotvel-z (degrees -0.3) (degrees 0.6))
   (:fade-a 1.0666667)
   (:accel-y (meters 0.000016666667))
   (:timer (seconds 4))
   (:flags (bit2 bit12))
   (:next-time (seconds 0.2))
   (:next-launcher 541)
   (:conerot-x (degrees 90) (degrees 10))
   (:conerot-y (degrees 0) (degrees 360))
   (:conerot-radius (meters 3.5) (meters 6))))

(defpart 541
  :init-specs ((:fade-a 0.0) (:next-time (seconds 1.5) (seconds 0.797)) (:next-launcher 542)))

(defpart 542
  :init-specs ((:fade-a -0.14222223)))

(deftype grottopole (process-drawable)
  ((root                collide-shape :override)
   (speed               meters)
   (distance            meters)
   (position            int32)
   (max-position        int32)
   (incomming-attack-id uint64))
  (:states
   grottopole-idle
   grottopole-moving-down
   grottopole-moving-up))

(defskelgroup *grottopole-sg*
  grottopole
  grottopole-lod0-jg
  grottopole-idle-ja
  ((grottopole-lod0-mg (meters 20)) (grottopole-lod1-mg (meters 999999)))
  :bounds (static-spherem 0 -8 0 9))

(defstate grottopole-idle (grottopole)
  :event
    (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
      (when (= (-> proc type) target)
        (case message
          (('attack)
           (let ((v1-2 (-> block param 2)))
             (when (!= v1-2 (-> self incomming-attack-id))
               (set! (-> self incomming-attack-id) v1-2)
               (case (-> block param 1)
                 (('uppercut)
                  (when (and (< (-> *target* control trans y) (+ -40960.0 (-> self root trans y)))
                             (< (-> self position) (-> self max-position))
                             ((method-of-type touching-shapes-entry prims-touching?)
                              (the-as touching-shapes-entry (-> block param 0))
                              (the-as collide-shape-moving (-> self root))
                              (the-as uint 2)))
                    (sound-play "grotto-pole-hit")
                    (sound-play "dirt-crumble")
                    (increment-success-for-hint (text-id beach-grottopole-increment))
                    (go grottopole-moving-up)))
                 (('flop)
                  (when (and (< (+ -40960.0 (-> self root trans y)) (-> *target* control trans y))
                             (> (-> self position) 0)
                             ((method-of-type touching-shapes-entry prims-touching?)
                              (the-as touching-shapes-entry (-> block param 0))
                              (the-as collide-shape-moving (-> self root))
                              (the-as uint 1)))
                    (sound-play "grotto-pole-hit")
                    (sound-play "dirt-crumble")
                    (go grottopole-moving-down))))))))))
  :code
    (behavior ()
      (set-time! (-> self state-time))
      (ja :group! grottopole-idle-ja :num! min)
      (transform-post)
      (suspend)
      (loop
        (logior! (-> self mask) (process-mask sleep))
        (suspend))))

(defun move-grottopole ((arg0 grottopole) (arg1 float))
  (let ((f30-0 0.0)
        (s4-0 (new-stack-vector0))
        (s3-0 (new-stack-vector0))
        (s2-0 #f))
    (set! (-> arg0 part local-clock) 0)
    (set-vector! s4-0 0.0 0.0 0.0 1.0)
    (while (and (not s2-0) (< f30-0 (-> arg0 distance)))
      (let ((f28-0 (* (-> arg0 speed) (seconds-per-frame))))
        (when (< (-> arg0 distance) (+ f30-0 f28-0))
          (set! f28-0 (- (-> arg0 distance) f30-0))
          (set! s2-0 #t))
        (set! (-> s4-0 y) (* f28-0 arg1))
        (move-by-vector! (-> arg0 root) s4-0)
        (+! f30-0 f28-0))
      (set! (-> s3-0 quad) (-> arg0 entity extra trans quad))
      (+! (-> s3-0 y) -4096.0)
      (spawn (-> arg0 part) s3-0)
      (suspend)
      0))
  0
  (none))

(defun move-grottopole-to-position ((arg0 grottopole))
  (let ((a1-0 (new 'stack-no-clear 'vector)))
    (set-vector! a1-0 0.0 (* (-> arg0 distance) (the float (-> arg0 position))) 0.0 1.0)
    (move-by-vector! (-> arg0 root) a1-0))
  0
  (none))

(defstate grottopole-moving-up (grottopole)
  :code
    (behavior ()
      (+! (-> self position) 1)
      (let ((v1-4 (-> self entity extra perm)))
        (logior! (-> v1-4 status) (entity-perm-status user-set-from-cstage))
        (set! (-> v1-4 user-int16 0) (-> self position)))
      (move-grottopole self 1.0)
      (go grottopole-idle))
  :post transform-post)

(defstate grottopole-moving-down (grottopole)
  :code
    (behavior ()
      (+! (-> self position) -1)
      (let ((v1-4 (-> self entity extra perm)))
        (logior! (-> v1-4 status) (entity-perm-status user-set-from-cstage))
        (set! (-> v1-4 user-int16 0) (-> self position)))
      (move-grottopole self -1.0)
      (go grottopole-idle))
  :post transform-post)

(defmethod init-from-entity! ((this grottopole) (arg0 entity-actor))
  (let ((s4-0 (new 'process 'collide-shape this (collide-list-enum hit-by-others))))
    (let ((s3-0 (new 'process 'collide-shape-prim-group s4-0 (the-as uint 3) 0)))
      (set! (-> s3-0 prim-core collide-as) (collide-kind wall-object))
      (set! (-> s3-0 collide-with) (collide-kind target))
      (set! (-> s3-0 prim-core action) (collide-action solid))
      (set-vector! (-> s3-0 local-sphere) 0.0 -20480.0 0.0 40960.0)
      (set-root-prim! s4-0 s3-0)
      (let ((s2-0 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 1))))
        (set! (-> s2-0 prim-core collide-as) (collide-kind wall-object))
        (set! (-> s2-0 collide-with) (collide-kind target))
        (set! (-> s2-0 prim-core action) (collide-action solid))
        (set! (-> s2-0 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-0 transform-index) 3)
        (set-vector! (-> s2-0 local-sphere) 0.0 -20480.0 0.0 40960.0)
        (append-prim s3-0 s2-0))
      (let ((s2-1 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 1) (the-as uint 0))))
        (set! (-> s2-1 prim-core collide-as) (collide-kind wall-object))
        (set! (-> s2-1 collide-with) (collide-kind target))
        (set! (-> s2-1 prim-core action) (collide-action solid))
        (set! (-> s2-1 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-1 transform-index) 3)
        (set-vector! (-> s2-1 local-sphere) 0.0 -20480.0 0.0 40960.0)
        (append-prim s3-0 s2-1))
      (let ((s2-2 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 2) (the-as uint 2))))
        (set! (-> s2-2 prim-core collide-as) (collide-kind wall-object))
        (set! (-> s2-2 collide-with) (collide-kind target))
        (set! (-> s2-2 prim-core action) (collide-action solid))
        (set! (-> s2-2 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-2 transform-index) 3)
        (set-vector! (-> s2-2 local-sphere) 0.0 -20480.0 0.0 40960.0)
        (append-prim s3-0 s2-2)))
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (backup-collide-with-as s4-0)
    (set! (-> this root) s4-0))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *grottopole-sg* '())
  (set! (-> this speed) (res-lump-float arg0 'speed :default 81920.0))
  (set! (-> this distance) (res-lump-float arg0 'distance :default 3072.0))
  (set! (-> this position) 0)
  (set! (-> this max-position) (res-lump-value arg0 'num-positions int :default (the-as uint128 3)))
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 155) this))
  (set! (-> this position) (-> this entity extra perm user-int16 0))
  (move-grottopole-to-position this)
  (go grottopole-idle)
  (none))

(deftype ecoventrock (process-drawable)
  ((root collide-shape :override))
  (:states (ecoventrock-break symbol)
   ecoventrock-idle))

(defskelgroup *ecoventrock-sg*
  ecoventrock
  ecoventrock-lod0-jg
  ecoventrock-idle-ja
  ((ecoventrock-lod0-mg (meters 20)) (ecoventrock-lod1-mg (meters 999999)))
  :bounds (static-spherem 0 1 0 3))

(defpartgroup group-beach-harvester-rock-explosion
  :id 156
  :duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 8)
  :parts
  ((sp-item 543 :period (seconds 5) :length (seconds 0.017))
   (sp-item 544 :period (seconds 5) :length (seconds 0.017))
   (sp-item 545 :period (seconds 5) :length (seconds 0.017))
   (sp-item 546 :period (seconds 5) :length (seconds 0.017))
   (sp-item 547 :period (seconds 5) :length (seconds 0.017))
   (sp-item 548 :period (seconds 5) :length (seconds 0.05))))

(defpart 547
  :init-specs
  ((:texture (new 'static 'texture-id :index #x12 :page #x2))
   (:num 1.0)
   (:scale-x (meters 15))
   (:scale-y :copy scale-x)
   (:r 130.0)
   (:g 64.0)
   (:b 54.0)
   (:a 128.0)
   (:fade-a -2.1333334)
   (:timer (seconds 0.2))
   (:flags (bit2 bit3))))

(defpart 543
  :init-specs
  ((:texture (new 'static 'texture-id :index #x1d :page #x2))
   (:num 4.0 6.0)
   (:scale-x (meters 0.1) (meters 0.3))
   (:rot-z (degrees 0) (degrees 360))
   (:scale-y :copy scale-x)
   (:r 70.0 16.0)
   (:g 70.0 16.0)
   (:b 70.0)
   (:a 128.0)
   (:vel-y (meters 0.06666667))
   (:rotvel-z (degrees -1.2) (degrees 2.4))
   (:accel-y (meters -0.0026666666))
   (:friction 0.99)
   (:timer (seconds 1))
   (:flags (bit2))
   (:next-time (seconds 0.58))
   (:next-launcher 549)
   (:conerot-x (degrees 45))
   (:conerot-y (degrees 0) (degrees 360))))

(defpart 544
  :init-specs
  ((:texture (new 'static 'texture-id :index #x1d :page #x2))
   (:num 4.0 6.0)
   (:scale-x (meters 0.1) (meters 0.3))
   (:rot-z (degrees 0) (degrees 360))
   (:scale-y :copy scale-x)
   (:r 70.0 16.0)
   (:g 70.0 16.0)
   (:b 70.0)
   (:a 128.0)
   (:vel-y (meters 0.04))
   (:rotvel-z (degrees -1.2) (degrees 2.4))
   (:accel-y (meters -0.0026666666))
   (:friction 0.99)
   (:timer (seconds 1))
   (:flags (bit2))
   (:next-time (seconds 0.417))
   (:next-launcher 549)
   (:conerot-x (degrees 30))
   (:conerot-y (degrees 0) (degrees 360))))

(defpart 545
  :init-specs
  ((:texture (new 'static 'texture-id :index #x1d :page #x2))
   (:num 4.0 6.0)
   (:scale-x (meters 0.1) (meters 0.3))
   (:rot-z (degrees 0) (degrees 360))
   (:scale-y :copy scale-x)
   (:r 80.0 16.0)
   (:g 80.0 16.0)
   (:b 80.0)
   (:a 128.0)
   (:vel-y (meters 0.08))
   (:rotvel-z (degrees -1.2) (degrees 2.4))
   (:accel-y (meters -0.0026666666))
   (:friction 0.99)
   (:timer (seconds 1))
   (:flags (bit2))
   (:next-time (seconds 0.65))
   (:next-launcher 549)
   (:conerot-x (degrees 35))
   (:conerot-y (degrees 0) (degrees 360))))

(defpart 549
  :init-specs ((:vel-y (meters 0.026666667)) (:rotvel-z (degrees -1.2) 1 (degrees 2.4)) (:fade-a -1.0666667)))

(defpart 548
  :init-specs
  ((:texture (new 'static 'texture-id :page #x2))
   (:num 16.0)
   (:y (meters 0.5) (meters 1))
   (:scale-x (meters 2.5) (meters 1.5))
   (:scale-y :copy scale-x)
   (:r 96.0 64.0)
   (:g 64.0 48.0)
   (:b 64.0 16.0)
   (:a 16.0 32.0)
   (:vel-y (meters 0.016666668) (meters 0.016666668))
   (:scalevel-x (meters 0.013333334))
   (:scalevel-y (meters 0.0033333334))
   (:accel-y (meters -0.00026666667))
   (:friction 0.95)
   (:timer (seconds 2))
   (:flags (bit2 bit12))
   (:next-time (seconds 0.1) (seconds 0.997))
   (:next-launcher 550)
   (:conerot-x (degrees 70) (degrees 20))
   (:conerot-y (degrees 0) (degrees 360))))

(defpart 550
  :init-specs ((:fade-a -0.2)))

(defstate ecoventrock-idle (ecoventrock)
  :event
    (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
      (case message
        (('attack)
         (sound-play "cannon-shot")
         (increment-success-for-hint (text-id sidekick-hint-ecorocks))
         (go ecoventrock-break #f))))
  :code
    (behavior ()
      (transform-post)
      (loop
        (logior! (-> self mask) (process-mask sleep))
        (suspend))))

(defstate ecoventrock-break (ecoventrock)
  :event process-drawable-fuel-cell-handler
  :enter
    (behavior ((arg0 symbol))
      (set-time! (-> self state-time)))
  :code
    (behavior ((arg0 symbol))
      (local-vars (sv-128 symbol))
      (ja-channel-set! 0)
      (clear-collide-with-as (-> self root))
      (ja-post)
      (process-entity-status! self (entity-perm-status complete) #t)
      (let ((v1-2 (entity-actor-lookup (-> self entity) 'alt-actor 0))) (send-event (if v1-2 (-> v1-2 extra process)) 'update))
      (when (not arg0)
        (process-spawn part-tracker
                       :init
                       part-tracker-init
                       (-> *part-group-id-table* 156)
                       -1
                       #f
                       #f
                       #f
                       (-> self root root-prim prim-core)
                       :to
                       *entity-pool*)
        (let* ((s5-1 (-> self root trans))
               (v1-14 (target-pos 0))
               (f0-1 (- (-> s5-1 x) (-> v1-14 x)))
               (f1-2 (- (-> s5-1 z) (-> v1-14 z)))
               (f2-1 7372.8)
               (f30-0 5734.4)
               (f2-2 (/ f2-1 (sqrtf (+ (* f0-1 f0-1) (* f1-2 f1-2)))))
               (f28-0 (* f0-1 f2-2))
               (f26-0 (* f1-2 f2-2))
               (s4-0 (new-stack-vector0))
               (s3-0 (new-stack-vector0)))
          (set-vector! s3-0 f28-0 f30-0 f26-0 1.0)
          (set-vector! s4-0 (+ (-> s5-1 x) (-> s3-0 x)) (-> s5-1 y) (+ (-> s5-1 z) (-> s3-0 z)) 1.0)
          (vector-float*! s3-0 s3-0 10.0)
          (spawn-flying-rock s4-0 s3-0 1.0 (-> self entity))
          (let ((f20-0 (rand-vu-float-range 90.0 130.0))
                (f24-0 (rand-vu-float-range 230.0 270.0)))
            (let ((f22-0 (cos (* 182.04445 f20-0)))
                  (f0-14 (sin (* 182.04445 f20-0))))
              (set-vector! s3-0 (+ (* f26-0 f0-14) (* f28-0 f22-0)) f30-0 (+ (* f28-0 (- f0-14)) (* f26-0 f22-0)) 1.0))
            (set-vector! s4-0 (+ (-> s5-1 x) (-> s3-0 x)) (-> s5-1 y) (+ (-> s5-1 z) (-> s3-0 z)) 1.0)
            (vector-float*! s3-0 s3-0 10.0)
            (spawn-flying-rock s4-0 s3-0 1.0 (-> self entity))
            (let ((f22-1 (cos (* 182.04445 f24-0)))
                  (f0-30 (sin (* 182.04445 f24-0))))
              (set-vector! s3-0 (+ (* f26-0 f0-30) (* f28-0 f22-1)) f30-0 (+ (* f28-0 (- f0-30)) (* f26-0 f22-1)) 1.0)))
          (set-vector! s4-0 (+ (-> s5-1 x) (-> s3-0 x)) (-> s5-1 y) (+ (-> s5-1 z) (-> s3-0 z)) 1.0)
          (vector-float*! s3-0 s3-0 10.0)
          (spawn-flying-rock s4-0 s3-0 1.0 (-> self entity))
          (set-vector! s3-0 (+ (* -0.866 f26-0) (* 0.5 f28-0)) (* 0.5 f30-0) (+ (* 0.866 f28-0) (* 0.5 f26-0)) 1.0)
          (set-vector! s4-0 (-> s5-1 x) (+ 3276.8 (-> s5-1 y)) (-> s5-1 z) 1.0)
          (vector-float*! s3-0 s3-0 10.0)
          (spawn-flying-rock s4-0 s3-0 1.0 (-> self entity))))
      (when (or (-> self link prev) (-> self link next))
        (set! sv-128 (the-as symbol #f))
        (apply-all (-> self link) actor-link-subtask-complete-hook (& sv-128))
        (when sv-128
          (let ((s5-2 (current-time))) (until (time-elapsed? s5-2 (seconds 0.5)) (suspend)))
          (let ((gp-1 (cond
                        (arg0 (the-as int #f))
                        (else
                         (ambient-hint-spawn "gamcam10" (the-as vector #f) *entity-pool* 'camera)
                         (ppointer->handle (process-spawn pov-camera (-> self root trans) *beachcam-sg* (-> self name) 0 #f '() :to self))))))
            (process-drawable-birth-fuel-cell (the-as entity #f) (the-as vector #f) #f)
            (while (handle->process (the-as handle gp-1))
              (suspend)))
          (while (-> self child)
            (suspend))))
      (process-entity-status! self (entity-perm-status dead) #t)
      (deactivate self)))

(defmethod init-from-entity! ((this ecoventrock) (arg0 entity-actor))
  (logior! (-> this mask) (process-mask enemy))
  (let ((s4-0 (new 'process 'collide-shape this (collide-list-enum hit-by-player))))
    (let ((s3-0 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s3-0 prim-core collide-as) (collide-kind enemy))
      (set! (-> s3-0 collide-with) (collide-kind target))
      (set! (-> s3-0 prim-core action) (collide-action solid))
      (set! (-> s3-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s3-0 transform-index) 0)
      (set-vector! (-> s3-0 local-sphere) 0.0 2457.6 0.0 6963.2)
      (set-root-prim! s4-0 s3-0))
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (backup-collide-with-as s4-0)
    (set! (-> this root) s4-0))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *ecoventrock-sg* '())
  (set! (-> this link) (new 'process 'actor-link-info this))
  (transform-post)
  (nav-mesh-connect this (-> this root) (the-as nav-control #f))
  (if (and (-> this entity) (logtest? (-> this entity extra perm status) (entity-perm-status complete)))
    (go ecoventrock-break #t)
    (go ecoventrock-idle))
  (none))

(deftype flying-rock (process-drawable)
  ((root   collide-shape-moving :override)
   (tumble quaternion :inline))
  (:states
   flying-rock-idle
   flying-rock-rolling))

(defskelgroup *kickrock-sg*
  kickrock
  kickrock-lod0-jg
  kickrock-idle-ja
  ((kickrock-lod0-mg (meters 999999)))
  :bounds (static-spherem 0 0 0 10))

(defstate flying-rock-rolling (flying-rock)
  :enter
    (behavior ()
      (set-time! (-> self state-time)))
  :code
    (behavior ()
      (let ((gp-0 #f)
            (f30-0 0.99)
            (s5-0 0))
        (while (< s5-0 2)
          (cond
            ((logtest? (-> self root status) (cshape-moving-flags onsurf))
             (when (not gp-0)
               (+! s5-0 1)
               (set! f30-0 0.8)
               (set! gp-0 #t)))
            (else (when gp-0 (set! f30-0 0.99) (set! gp-0 #f))))
          (vector-float*! (-> self root transv) (-> self root transv) f30-0)
          (set! (-> self root transv w) 1.0)
          (if (not gp-0) (vector-v++! (-> self root transv) (compute-acc-due-to-gravity (-> self root) (new-stack-vector0) 1.0)))
          (update-transforms! (-> self root))
          (fill-cache-integrate-and-collide! (-> self root) (-> self root transv) (collide-kind background))
          (quaternion*! (-> self root quat) (-> self root quat) (-> self tumble))
          (suspend)))
      (while (< 2048.0 (vector-length (-> self root transv)))
        (cond
          ((logtest? (-> self root status) (cshape-moving-flags onsurf))
           (vector-float*! (-> self root transv) (-> self root transv) 0.8))
          (else
           (vector-float*! (-> self root transv) (-> self root transv) 0.99)
           (vector-v++! (-> self root transv) (compute-acc-due-to-gravity (-> self root) (new-stack-vector0) 1.0))))
        (set! (-> self root transv w) 1.0)
        (update-transforms! (-> self root))
        (fill-cache-integrate-and-collide! (-> self root) (-> self root transv) (collide-kind background))
        (let ((gp-2 (new 'stack-no-clear 'vector))
              (f30-1 (vector-length (-> self root transv))))
          (set-vector! gp-2 (-> self root transv z) 0.0 (- (-> self root transv x)) 1.0)
          (vector-normalize! gp-2 1.0)
          (let ((f0-12 (* 0.00061035156 (seconds-per-frame) f30-1)))
            (quaternion-vector-angle! (-> self tumble) gp-2 (* 10430.379 f0-12))))
        (quaternion*! (-> self root quat) (-> self tumble) (-> self root quat))
        (suspend))
      (go flying-rock-idle))
  :post
    (behavior ()
      (if (time-elapsed? (-> self state-time) (seconds 3)) (go flying-rock-idle))
      (ja-post)))

(defstate flying-rock-idle (flying-rock)
  :code
    (behavior ()
      (clear-collide-with-as (-> self root))
      (while (or (logtest? (-> self draw status) (draw-status was-drawn))
                 (and *target* (>= 204800.0 (vector-vector-distance (-> self root trans) (-> *target* control trans)))))
        (suspend))
      (deactivate self))
  :post ja-post)

(defbehavior flying-rock-init-by-other flying-rock ((arg0 vector) (arg1 vector) (arg2 float) (arg3 entity-actor))
  (set! (-> self entity) arg3)
  (let ((s3-0 (new 'process 'collide-shape-moving self (collide-list-enum hit-by-player))))
    (set! (-> s3-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s3-0 reaction) simple-collision-reaction)
    (set! (-> s3-0 no-reaction) (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing))
    (let ((s2-0 (new 'process 'collide-shape-prim-sphere s3-0 (the-as uint 0))))
      (set! (-> s2-0 prim-core collide-as) (collide-kind enemy))
      (set! (-> s2-0 collide-with) (collide-kind background target))
      (set! (-> s2-0 prim-core action) (collide-action solid))
      (set! (-> s2-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s2-0 transform-index) 0)
      (set-vector! (-> s2-0 local-sphere) 0.0 0.0 0.0 (* 409.6 arg2))
      (set-root-prim! s3-0 s2-0))
    (set! (-> s3-0 nav-radius) (* 0.75 (-> s3-0 root-prim local-sphere w)))
    (backup-collide-with-as s3-0)
    (set! (-> self root) s3-0))
  (set! (-> self root trans quad) (-> arg0 quad))
  (set-vector! (-> self root scale) arg2 arg2 arg2 1.0)
  (let ((s5-1 (new-stack-vector0)))
    (set-vector! s5-1 (rand-vu-float-range -1.0 1.0) (rand-vu-float-range -1.0 1.0) (rand-vu-float-range -1.0 1.0) 1.0)
    (vector-normalize! s5-1 1.0)
    (quaternion-vector-angle! (-> self tumble) s5-1 (rand-vu-float-range 0.0 1820.4445)))
  (quaternion-axis-angle! (-> self root quat) 0.0 1.0 0.0 (rand-vu-float-range 0.0 65536.0))
  (initialize-skeleton self *kickrock-sg* '())
  (set! (-> self root transv quad) (-> arg1 quad))
  (go flying-rock-rolling)
  (none))

(defun spawn-flying-rock ((arg0 vector) (arg1 vector) (arg2 float) (arg3 entity))
  (process-spawn flying-rock arg0 arg1 arg2 arg3 :to *entity-pool*)
  0
  (none))

(deftype bladeassm (process-drawable)
  ((root  collide-shape-moving :override)
   (angle float))
  (:states
   bladeassm-idle))

(defskelgroup *bladeassm-sg*
  bladeassm
  bladeassm-lod0-jg
  bladeassm-idle-ja
  ((bladeassm-lod0-mg (meters 20)) (bladeassm-lod1-mg (meters 40)) (bladeassm-lod2-mg (meters 999999)))
  :bounds (static-spherem 0 0 0 10)
  :longest-edge (meters 10))

(defstate bladeassm-idle (bladeassm)
  :code
    (behavior ()
      (loop
        (+! (-> self angle) (* 3640.889 (seconds-per-frame)))
        (set! (-> self angle) (the float (sar (shl (the int (-> self angle)) 48) 48)))
        (pusher-post)
        (suspend))))

(defun bladeassm-prebind-function ((arg0 process-drawable) (arg1 int) (arg2 bladeassm) (arg3 event-message-block))
  (let ((v1-0 arg2)) (quaternion-axis-angle! (the-as quaternion (&-> arg0 link)) 0.0 0.0 1.0 (-> v1-0 angle)))
  0)

(defmethod init-from-entity! ((this bladeassm) (arg0 entity-actor))
  (logior! (-> this mask) (process-mask ambient))
  (let ((s4-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s4-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s4-0 reaction) default-collision-reaction)
    (set! (-> s4-0 no-reaction) (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing))
    (let ((s3-0 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s3-0 prim-core collide-as) (collide-kind ground-object))
      (set! (-> s3-0 collide-with) (collide-kind target))
      (set! (-> s3-0 prim-core action) (collide-action solid))
      (set! (-> s3-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s3-0 transform-index) 3)
      (set-vector! (-> s3-0 local-sphere) 0.0 0.0 0.0 49152.0)
      (set-root-prim! s4-0 s3-0))
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (backup-collide-with-as s4-0)
    (set! (-> this root) s4-0))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *bladeassm-sg* '())
  (set! (-> this skel prebind-function) (the-as (function pointer int process-drawable none) bladeassm-prebind-function))
  (logclear! (-> this mask) (process-mask actor-pause))
  (go bladeassm-idle)
  (none))

(deftype harvester (process-drawable)
  ((root      collide-shape :override)
   (alt-actor entity-actor))
  (:states
   harvester-idle
   (harvester-inflate symbol)))

(defskelgroup *harvester-sg*
  harvester
  harvester-lod0-jg
  harvester-idle-ja
  ((harvester-lod0-mg (meters 20)) (harvester-lod1-mg (meters 40)) (harvester-lod2-mg (meters 999999)))
  :bounds (static-spherem 0 7 0 11))

(defstate harvester-idle (harvester)
  :event
    (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
      (case message
        (('update)
         (if (and (-> self alt-actor) (logtest? (-> self alt-actor extra perm status) (entity-perm-status complete)))
           (go harvester-inflate #f)))))
  :code
    (behavior ()
      (if (and (-> self alt-actor) (logtest? (-> self alt-actor extra perm status) (entity-perm-status complete)))
        (go harvester-inflate #t))
      (ja :group! harvester-inflate-ja :num! (identity (ja-aframe 1.0 0)))
      (ja-post)
      (loop
        (logior! (-> self mask) (process-mask sleep))
        (suspend))))

(defstate harvester-inflate (harvester)
  :code
    (behavior ((arg0 symbol))
      (when (not arg0)
        (ja-no-eval :group! harvester-inflate-ja :num! (seek!) :frame-num 0.0)
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek!))))
      (loop
        (ja-no-eval :group! harvester-idle-ja :num! (seek!) :frame-num 0.0)
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek!)))))
  :post ja-post)

(defmethod init-from-entity! ((this harvester) (arg0 entity-actor))
  (logior! (-> this mask) (process-mask ambient))
  (let ((s4-0 (new 'process 'collide-shape this (collide-list-enum hit-by-player))))
    (let ((s3-0 (new 'process 'collide-shape-prim-group s4-0 (the-as uint 5) 0)))
      (set! (-> s3-0 prim-core collide-as) (collide-kind background))
      (set! (-> s3-0 collide-with) (collide-kind target))
      (set! (-> s3-0 prim-core action) (collide-action solid))
      (set! (-> s3-0 transform-index) 0)
      (set-vector! (-> s3-0 local-sphere) 0.0 20480.0 0.0 40960.0)
      (set-root-prim! s4-0 s3-0)
      (let ((s2-0 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
        (set! (-> s2-0 prim-core collide-as) (collide-kind ground-object))
        (set! (-> s2-0 collide-with) (collide-kind target))
        (set! (-> s2-0 prim-core action) (collide-action solid))
        (set! (-> s2-0 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-0 transform-index) 4)
        (set-vector! (-> s2-0 local-sphere) 0.0 6144.0 0.0 24576.0)
        (append-prim s3-0 s2-0))
      (let ((s2-1 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 1) (the-as uint 0))))
        (set! (-> s2-1 prim-core collide-as) (collide-kind ground-object))
        (set! (-> s2-1 collide-with) (collide-kind target))
        (set! (-> s2-1 prim-core action) (collide-action solid))
        (set! (-> s2-1 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-1 transform-index) 4)
        (set-vector! (-> s2-1 local-sphere) 16384.0 -20480.0 16384.0 20480.0)
        (append-prim s3-0 s2-1))
      (let ((s2-2 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 2) (the-as uint 0))))
        (set! (-> s2-2 prim-core collide-as) (collide-kind ground-object))
        (set! (-> s2-2 collide-with) (collide-kind target))
        (set! (-> s2-2 prim-core action) (collide-action solid))
        (set! (-> s2-2 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-2 transform-index) 4)
        (set-vector! (-> s2-2 local-sphere) 16384.0 -20480.0 -16384.0 20480.0)
        (append-prim s3-0 s2-2))
      (let ((s2-3 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 3) (the-as uint 0))))
        (set! (-> s2-3 prim-core collide-as) (collide-kind ground-object))
        (set! (-> s2-3 collide-with) (collide-kind target))
        (set! (-> s2-3 prim-core action) (collide-action solid))
        (set! (-> s2-3 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-3 transform-index) 4)
        (set-vector! (-> s2-3 local-sphere) -16384.0 -20480.0 -16384.0 20480.0)
        (append-prim s3-0 s2-3))
      (let ((s2-4 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 4) (the-as uint 0))))
        (set! (-> s2-4 prim-core collide-as) (collide-kind ground-object))
        (set! (-> s2-4 collide-with) (collide-kind target))
        (set! (-> s2-4 prim-core action) (collide-action solid))
        (set! (-> s2-4 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-4 transform-index) 4)
        (set-vector! (-> s2-4 local-sphere) -16384.0 -20480.0 16384.0 20480.0)
        (append-prim s3-0 s2-4)))
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (backup-collide-with-as s4-0)
    (set! (-> this root) s4-0))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *harvester-sg* '())
  (set! (-> this alt-actor) (entity-actor-lookup (-> this entity) 'alt-actor 0))
  (go harvester-idle)
  (none))

(deftype beachcam (process-hidden) ())

(defun beachcam-spawn ()
  (with-pp
    (let ((gp-0 (entity-actor-lookup (-> pp entity) 'alt-actor 0)))
      (when gp-0
        (let* ((gp-1 (ppointer->handle (process-spawn pov-camera
                                                      (-> gp-0 extra trans)
                                                      *beachcam-sg*
                                                      (new 'static 'spool-anim :name "beachcam-cannon" :index 3 :parts 1 :command-list '())
                                                      0
                                                      #f
                                                      '()
                                                      :to
                                                      pp)))
               (s5-2 (ppointer->handle (process-spawn fuel-cell :init fuel-cell-init-as-clone gp-1 (-> pp entity extra perm task) :to pp))))
          (let ((v1-13 (handle->process gp-1)))
            (if v1-13 (set! (-> (the-as pov-camera v1-13) notify-handle) (the-as handle s5-2))))
          (while (handle->process gp-1)
            (suspend))
          (send-event (handle->process s5-2) 'stop-cloning))))
    0
    (none)))
