;;-*-Lisp-*-
(in-package goal)
(bundles "FIC.DGO" "OGR.DGO")
(require "engine/common-obs/generic-obs.gc")

;; DECOMP BEGINS

(deftype spike (process-drawable)
  ((root     collide-shape :override)
   (num-alts int32))
  (:states
   spike-down
   spike-idle
   spike-up))

(defskelgroup *spike-sg*
  spike
  spike-lod0-jg
  spike-idle-ja
  ((spike-lod0-mg (meters 20)) (spike-lod1-mg (meters 999999)))
  :bounds (static-spherem 0 8 0 10.2)
  :longest-edge (meters 5))

(defstate spike-up (spike)
  :event
    (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
      (case message
        (('go-spike-up) #t)))
  :trans
    (behavior ()
      (when (nonzero? (-> self num-alts))
        (let ((s5-0 (/ (-> self num-alts) 2))
              (gp-0 #t))
          (while (< s5-0 (+ (-> self num-alts) -1))
            (let ((v1-2 (entity-actor-lookup (-> self entity) 'alt-actor s5-0)))
              (if (and v1-2 (-> v1-2 extra process) (not (send-event (if v1-2 (-> v1-2 extra process)) 'go-spike-up))) (set! gp-0 #f)))
            (+! s5-0 1))
          (when gp-0
            (set! (-> self num-alts) 0)
            0))))
  :code
    (behavior ()
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (transform-post)
        (suspend)
        (ja :num! (seek!)))
      (loop
        (suspend))))

(defstate spike-down (spike)
  :event
    (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
      (case message
        (('go-spike-up) (go spike-up) #t)))
  :trans
    (behavior ()
      (when (nonzero? (-> self num-alts))
        (let ((s5-0 0)
              (gp-0 #t))
          (while (< s5-0 (/ (-> self num-alts) 2))
            (let ((v1-1 (entity-actor-lookup (-> self entity) 'alt-actor s5-0)))
              (if (and v1-1 (-> v1-1 extra process) (not (send-event (if v1-1 (-> v1-1 extra process)) 'go-spike-up))) (set! gp-0 #f)))
            (+! s5-0 1))
          (when gp-0
            (set! (-> self num-alts) 0)
            0))))
  :code
    (behavior ()
      (transform-post)
      (loop
        (suspend))))

(defstate spike-idle (spike)
  :trans
    (behavior ()
      (when (and *target*
                 (= (send-event *target* 'query 'mode) 'racer)
                 (< (vector-vector-distance (-> self root trans) (target-pos 0)) 225280.0))
        (sound-play "magma-rock")
        (let ((v1-8 (entity-actor-count (-> self entity) 'alt-actor)))
          0
          (cond
            ((>= 1 v1-8) (go spike-up))
            ((< (rand-float-gen) 0.5) (go spike-down))
            (else (go spike-up))))))
  :code
    (behavior ()
      (transform-post)
      (loop
        (suspend))))

(defmethod init-from-entity! ((this spike) (arg0 entity-actor))
  (let ((s4-0 (new 'process 'collide-shape this (collide-list-enum hit-by-player))))
    (let ((s3-0 (new 'process 'collide-shape-prim-group s4-0 (the-as uint 4) 0)))
      (set! (-> s3-0 prim-core collide-as) (collide-kind enemy))
      (set! (-> s3-0 collide-with) (collide-kind target))
      (set! (-> s3-0 prim-core action) (collide-action solid))
      (set! (-> s3-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s3-0 transform-index) 3)
      (set-vector! (-> s3-0 local-sphere) 0.0 24576.0 0.0 40960.0)
      (set-root-prim! s4-0 s3-0)
      (let ((s2-0 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
        (set! (-> s2-0 prim-core collide-as) (collide-kind enemy))
        (set! (-> s2-0 collide-with) (collide-kind target))
        (set! (-> s2-0 prim-core action) (collide-action solid))
        (set! (-> s2-0 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-0 transform-index) 3)
        (set-vector! (-> s2-0 local-sphere) 0.0 8192.0 0.0 16384.0)
        (append-prim s3-0 s2-0))
      (let ((s2-1 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
        (set! (-> s2-1 prim-core collide-as) (collide-kind enemy))
        (set! (-> s2-1 collide-with) (collide-kind target))
        (set! (-> s2-1 prim-core action) (collide-action solid))
        (set! (-> s2-1 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-1 transform-index) 3)
        (set-vector! (-> s2-1 local-sphere) 0.0 20480.0 0.0 16384.0)
        (append-prim s3-0 s2-1))
      (let ((s2-2 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
        (set! (-> s2-2 prim-core collide-as) (collide-kind enemy))
        (set! (-> s2-2 collide-with) (collide-kind target))
        (set! (-> s2-2 prim-core action) (collide-action solid))
        (set! (-> s2-2 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-2 transform-index) 3)
        (set-vector! (-> s2-2 local-sphere) 0.0 32768.0 0.0 16384.0)
        (append-prim s3-0 s2-2))
      (let ((s2-3 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
        (set! (-> s2-3 prim-core collide-as) (collide-kind enemy))
        (set! (-> s2-3 collide-with) (collide-kind target))
        (set! (-> s2-3 prim-core action) (collide-action solid))
        (set! (-> s2-3 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-3 transform-index) 3)
        (set-vector! (-> s2-3 local-sphere) 0.0 45056.0 0.0 16384.0)
        (append-prim s3-0 s2-3)))
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (backup-collide-with-as s4-0)
    (set! (-> this root) s4-0))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *spike-sg* '())
  (set! (-> this draw origin-joint-index) (the-as uint 3))
  (set! (-> this num-alts) (entity-actor-count (-> this entity) 'alt-actor))
  (if (zero? (-> this num-alts)) (go spike-down) (go spike-idle))
  (none))
