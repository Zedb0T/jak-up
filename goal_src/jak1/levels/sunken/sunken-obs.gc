;;-*-Lisp-*-
(in-package goal)

;; name: sunken-obs.gc
;; name in dgo: sunken-obs
;; dgos: L1, SUN, SUNKEN
 
(declare-type seaweed basic)
(define-extern *seaweed* seaweed)

;; DECOMP BEGINS

(deftype water-vol-deadly (process-hidden)
  ()
  )

(deftype sunkencam (pov-camera)
  ((ppointer-override  (pointer sunkencam)  :overlay-at ppointer)
   (seq                uint64)
   )
  )


(defskelgroup *sunkencam-sg* sunkencam sunkencam-lod0-jg -1
              ((sunkencam-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 10)
              )

(defmethod set-stack-size! ((this sunkencam))
  (stack-size-set! (-> this main-thread) 512)
  (none)
  )

(defstate pov-camera-playing (sunkencam)
  :virtual #t
  :exit (behavior ()
    (set! (-> *screen-filter* draw?) #f)
    )
  :code (behavior ()
    (let ((v1-0 (-> self seq)))
      (cond
        ((zero? v1-0)
         (ja-no-eval :group! sunkencam-start-door-shut-ja :num! (seek!) :frame-num 0.0)
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek!))
           )
         (ja-no-eval :group! sunkencam-start-in-room-ja :num! (seek!) :frame-num 0.0)
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek!))
           )
         (let ((v1-45 *screen-filter*))
           (set! (-> v1-45 draw?) #t)
           (set! (-> v1-45 color) (new 'static 'rgba :g #x20 :b #x40 :a #x50))
           )
         (set-blackout-frames (seconds 0.1))
         (ja-no-eval :group! sunkencam-middle-in-water-ja :num! (seek!) :frame-num 0.0)
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek!))
           )
         (set-blackout-frames (seconds 0.5))
         (let ((gp-0 2))
           (ja-no-eval :group! sunkencam-end-out-of-water-ja :num! (seek!) :frame-num 0.0)
           (until (ja-done? 0)
             (+! gp-0 -1)
             (if (zero? gp-0)
                 (set! (-> *screen-filter* draw?) #f)
                 )
             (suspend)
             (ja :num! (seek!))
             )
           )
         (set-blackout-frames (seconds 0.1))
         )
        ((= v1-0 1)
         (ja-no-eval :group! sunkencam-dive-start-ja :num! (seek!) :frame-num 0.0)
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek!))
           )
         (let ((v1-116 *screen-filter*))
           (set! (-> v1-116 draw?) #t)
           (set! (-> v1-116 color) (new 'static 'rgba :g #x20 :b #x40 :a #x50))
           )
         (set-blackout-frames (seconds 0.1))
         (ja-no-eval :group! sunkencam-dive-middle-ja :num! (seek!) :frame-num 0.0)
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek!))
           )
         (set-blackout-frames (seconds 0.1))
         (let ((gp-1 2))
           (ja-no-eval :group! sunkencam-dive-end-ja :num! (seek!) :frame-num 0.0)
           (until (ja-done? 0)
             (+! gp-1 -1)
             (if (zero? gp-1)
                 (set! (-> *screen-filter* draw?) #f)
                 )
             (suspend)
             (ja :num! (seek!))
             )
           )
         (let ((gp-2 *camera*))
           (send-event gp-2 'teleport)
           (send-event gp-2 'change-state cam-fixed 0)
           (send-event gp-2 'change-state *camera-base-mode* 0)
           )
         (set-time! (-> self state-time))
         (until (time-elapsed? (-> self state-time) (seconds 1))
           (suspend)
           )
         )
        ((= v1-0 2)
         (ja-no-eval :group! sunkencam-helix-hit-switch-ja :num! (seek!) :frame-num 0.0)
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek!))
           )
         (ja-no-eval :group! sunkencam-helix-door-shuts-ja :num! (seek! max 0.67) :frame-num 0.0)
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek! max 0.67))
           )
         (pov-camera-play-and-reposition
           (the-as art-joint-anim sunkencam-helix-show-rising-water-ja)
           (new 'static 'vector :x 2449408.0 :y -1822720.0 :z -7299072.0)
           0.67
           )
         )
        ((= v1-0 3)
         (ambient-hint-spawn "gamcam34" (the-as vector #f) *entity-pool* 'camera)
         (pov-camera-play-and-reposition
           (the-as art-joint-anim sunkencam-square-platform-setup1-rise1-ja)
           (new 'static 'vector :x 2707456.0 :y -630784.0 :z -6635520.0)
           1.0
           )
         )
        ((= v1-0 4)
         (ambient-hint-spawn "gamcam35" (the-as vector #f) *entity-pool* 'camera)
         (pov-camera-play-and-reposition
           (the-as art-joint-anim sunkencam-square-platform-setup1-rise2-ja)
           (new 'static 'vector :x 2834432.0 :y -634880.0 :z -6811648.0)
           1.3
           )
         (set-time! (-> self state-time))
         (until (time-elapsed? (-> self state-time) (seconds 0.2))
           (suspend)
           )
         )
        ((= v1-0 5)
         (ambient-hint-spawn "gamcam37" (the-as vector #f) *entity-pool* 'camera)
         (pov-camera-play-and-reposition
           (the-as art-joint-anim sunkencam-square-platform-setup2-rise1-ja)
           (new 'static 'vector :x 2695168.0 :y -544768.0 :z -7077888.0)
           1.0
           )
         )
        ((= v1-0 6)
         (ambient-hint-spawn "gamcam36" (the-as vector #f) *entity-pool* 'camera)
         (pov-camera-play-and-reposition
           (the-as art-joint-anim sunkencam-square-platform-setup2-rise2-ja)
           (new 'static 'vector :x 2482176.0 :y -516096.0 :z -6922240.0)
           1.0
           )
         )
        (else
          (suspend)
          0
          )
        )
      )
    (go-virtual pov-camera-done-playing)
    )
  )

(deftype seaweed (process-drawable)
  ((anim-speed  float)
   )
  (:states
    seaweed-idle
    )
  )


(defskelgroup *seaweed-sg* seaweed seaweed-lod0-jg -1
              ((seaweed-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 6 0 7)
              )

(defstate seaweed-idle (seaweed)
  :code (behavior ()
    (ja-no-eval :num! (seek! max (-> self anim-speed)))
    (while (not (ja-done? 0))
      (suspend)
      (ja-eval)
      )
    (loop
      (ja-no-eval :group! seaweed-idle-ja :num! (seek! max (-> self anim-speed)) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! max (-> self anim-speed)))
        )
      )
    )
  :post ja-post
  )

(defmethod init-from-entity! ((this seaweed) (arg0 entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *seaweed-sg* '())
  (ja-channel-set! 1)
  (let ((s5-1 (-> this skel root-channel 0)))
    (joint-control-channel-group-eval!
      s5-1
      (the-as art-joint-anim (-> this draw art-group data 2))
      num-func-identity
      )
    (set! (-> s5-1 frame-num)
          (rand-vu-float-range 0.0 (the float (+ (-> (if (> (-> this skel active-channels) 0)
                                                         (-> this skel root-channel 0 frame-group)
                                                         )
                                                     data
                                                     0
                                                     length
                                                     )
                                                 -1
                                                 )
                                        )
                               )
          )
    )
  (set! (-> this anim-speed) (rand-vu-float-range 0.2 0.4))
  (set! *seaweed* this)
  (go seaweed-idle)
  (none)
  )
