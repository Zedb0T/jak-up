;;-*-Lisp-*-
(in-package goal)

;; originally in name: sunken-obs.gc
;; name in dgo: sunken-obs
;; dgos: L1, SUN, SUNKEN
 
;; DECOMP BEGINS

(deftype side-to-side-plat (plat)
  ((part-ry float  :offset-assert 264)
   )
  :heap-base #xa0
  :method-count-assert 33
  :size-assert         #x10c
  :flag-assert         #x2100a0010c
  )


(defskelgroup *side-to-side-plat-sg* side-to-side-plat side-to-side-plat-lod0-jg side-to-side-plat-idle-ja
              ((side-to-side-plat-lod0-mg (meters 20)) (side-to-side-plat-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 14)
              )

(defpartgroup group-side-to-side-plat
  :id 436
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 1713 :fade-after (meters 60) :falloff-to (meters 60))
    (sp-item 1714 :fade-after (meters 160) :falloff-to (meters 160))
    )
  )

(defpart 1713
  :init-specs ((:num 4.0)
    (:x (meters -11) (meters 22))
    (:y (meters 1))
    (:rot-x 5)
    (:r 5324.8)
    (:g 4096.0)
    (:b 3686.4)
    (:vel-y (meters 0.0033333334))
    (:fade-b -16.383999)
    (:timer (seconds 0.085))
    (:flags (aux-list))
    (:conerot-x (degrees 140) (degrees 40))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 3))
    (:rotate-y (degrees 18))
    )
  )

(defpart 1714
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 6.0)
    (:x (meters -11) (meters 22))
    (:y (meters 1.5))
    (:scale-x (meters 2) (meters 1))
    (:scale-y :copy scale-x)
    (:g 0.0 64.0)
    (:b 128.0 128.0)
    (:a 16.0 32.0)
    (:vel-y (meters 0.01))
    (:fade-g -0.42666668)
    (:fade-a -0.32)
    (:accel-y (meters -0.000033333334))
    (:friction 0.96)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3))
    (:conerot-x (degrees 130) (degrees 100.00001))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 3))
    (:rotate-y (degrees 18))
    )
  )

(defmethod get-unlit-skel side-to-side-plat ((obj side-to-side-plat))
  *side-to-side-plat-sg*
  )

(defmethod baseplat-method-24 side-to-side-plat ((obj side-to-side-plat))
  (let ((s5-0 (new 'process 'collide-shape-moving obj (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) default-collision-reaction)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing)
          )
    (alloc-riders s5-0 1)
    (let ((s4-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s4-0 prim-core collide-as) (collide-kind ground-object))
      (set! (-> s4-0 collide-with) (collide-kind target))
      (set! (-> s4-0 prim-core action) (collide-action solid rider-plat-sticky))
      (set! (-> s4-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s4-0 transform-index) 0)
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 57344.0)
      (set-root-prim! s5-0 s4-0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (backup-collide-with-as s5-0)
    (set! (-> obj root-override) s5-0)
    )
  0
  (none)
  )

(defmethod baseplat-method-26 side-to-side-plat ((obj side-to-side-plat))
  (set! (-> obj part-ry) (+ 16384.0 (quaternion-y-angle (-> obj root-override quat))))
  (none)
  )

(defmethod baseplat-method-25 side-to-side-plat ((obj side-to-side-plat))
  (let ((v0-0 (create-launch-control (-> *part-group-id-table* 436) obj)))
    (set! (-> obj part) v0-0)
    (the-as sparticle-launch-group v0-0)
    )
  )

(defmethod baseplat-method-20 side-to-side-plat ((obj side-to-side-plat))
  (when (nonzero? (-> obj part))
    (set! (-> *part-id-table* 1713 init-specs 14 initial-valuef) (-> obj part-ry))
    (set! (-> *part-id-table* 1714 init-specs 19 initial-valuef) (-> obj part-ry))
    (spawn (-> obj part) (-> obj root-override trans))
    )
  (none)
  )