;;-*-Lisp-*-
    (in-package goal)

    ;; name: mod-custom-code.gc
    ;; name in dgo: mod-custom-code
    ;; dgos: TODO


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; What is this file for.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| This file contains function defenitions that are pre placed in the mod base,
    so if you place custom code inside of these functions, it will exectue based on
    the name of the function, for example, if you place (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
    to the function named runs-on-orb-pickup, then jaks powercell count will increase each time you collect
    an orb |#


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Begin function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    (defun runs-every-frame ()
      (let ((plat-training (the process-drawable (process-by-ename "jakup-training-plat-02")))
            ;; (flutflutegg-beach (the flutflutegg (process-by-ename "jakup-beach-flutflutegg-01")))
            )
        (when (and plat-training (= (-> plat-training state name) 'plat-idle)
                  (task-complete? *game-info* (game-task jakup-training))
                  )
          (format 0 "jakup-training activate final plat~%")
          (send-event plat-training 'wake)
          )
        ;; (when (and flutflutegg-beach (= (-> flutflutegg-beach state name) 'flutflutegg-idle))
        ;;   (set-vector! (-> flutflutegg-beach dir) 0.0 0.0 -1.0 0.0)
        ;;   (set-vector! (-> flutflutegg-beach root-override quat) 0.0 -1.0 0.0 0.0)
        ;;   )
        (when (and *target*
                   (logtest? (-> *target* control root-prim prim-core action) (collide-action racer racer-unused))
                   (= (-> *target* current-level name) 'jakup-beach)
                   )
          (send-event *target* 'end-mode) ;; exit racer
          )
        )

      (none)
      )
